<?
/*****************************************************************************/
/**
 * Interactive PHP
 * Testing environment for PHP language in Silverlight
 *
 * @author Tomas Petricek <tomas@tomasp.net>
 * @package sldemos
 *
 * @todo Use 'private', once the issue in Phalanger on SL is solved!
 */
/*****************************************************************************/

import namespace System;
import namespace System:::Threading;
import namespace System:::IO;
import namespace System:::IO:::IsolatedStorage;
import namespace System:::Windows;
import namespace System:::Windows:::Controls;
import namespace System:::Windows:::Media;
import namespace System:::Windows:::Input;
import namespace System:::Windows:::Media:::Animation;

include("config.phpx");
include("slutils.phpx");

/*****************************************************************************/

function ignoreChar($str)
{
	return $str;
}

function insertChar($str, $shift, $c, $cs)
{
	return $str . ($shift?$cs:$c);
}

function backspaceChar($str)
{
	return substr($str, 0, strlen($str)-1);
}

/*****************************************************************************/

/**
 * Implements the interactive PHP environment.
 *
 * The object is created by the @see OnLoad function (declared later)
 * when the Silverlight control is loaded in the browser.
 *
 * The app inherits from @see CanvasWrapper utility class from the 
 * 'slutils.phpx' file. This class provides simplified access to SL elements
 * and properties of the elements.
 */
class InteractivePhp extends CanvasWrapper
{
	/******************************  Initialization ****************************/
	
	public $keys;
	public $pkeys;
	
	function __construct($canv)
	{
		parent::__construct($canv);

		// Initialize keys and text block
		$this->InitKeys();
		$this->KeyDown->Add(new KeyboardEventHandler(array($this,"KeyDown")));
		$this->txt->Text = 
			'// Canvas is accessible via "$canvas" variable'."\n".
			'// E.g. changing the background:'."\n".
			'//   $canvas->Background = new SolidColorBrush(Colors::$Orange);'."\n".
			'// Use Ctrl+Enter to execute the code, Ctrl+Del to reset the canvas.'."\n".
			'$canvas->Background = new SolidColorBrush(Colors::$Orange);'."\n";
	}

	function ExecuteCode()
	{
		$canvas = $this->canv;
		try
		{
			eval($this->txt->Text);			
			$this->err->Text = "Successfully completed!";
		}
		catch(System:::Exception $e)
		{
			$this->err->Text = $e->Message;
		}
	}
	
	function PasteScript($i)
	{
		if ($i == 1)
		{
			$this->txt->Text = 
				'$canvas->Background = new SolidColorBrush(Colors::$White);'."\n".
				'if ($canvas->Children->Count > 0)'."\n".
				'  $tx = $canvas->Children->get_Item(0);'."\n".
				'else'."\n".
				'  { $tx = new TextBlock(); $canvas->Children->Add($tx); }'."\n\n".
				'$tx->Text = "Hello world!";'."\n";
		}
		if ($i == 2)
		{
			$this->txt->Text = 
				'$canvas->Background = new SolidColorBrush(Colors::$Yellow);'."\n".
				'$tx = new TextBlock();'."\n".
				'$canvas->Children->Add($tx);'."\n".
				'$tx->Text = "Hello world!";'."\n".
				'$tx->FontSize =  40;'."\n\n".
				'function tx_Clicked($sender, $e)'."\n".
				'{'."\n".
  				'$sender->Text = "Clicked!";'."\n".
				'}'."\n".
				'$tx->MouseLeftButtonDown->Add'."\n".
				'  (new MouseEventHandler("tx_Clicked"));'."\n";
		}
	}
	
	function ResetCanvas()
	{
		$this->canv->Background = new SolidColorBrush(Color::FromArgb(255,240,240,240));
		while($this->canv->Children->Count > 0)
			$this->canv->Children->RemoveAt(0);
		$this->err->Text = "Canvas reset done. " . $this->canv->Children->Count;
	}
	
	/**
	 * Initialize $keys and $pkeys lookup arrays that are used for key processing.
	 * The key values are based on the DLR Console demo.
	 */
	function InitKeys()
	{
		$this->keys = array();
		for($i=0; $i<=ord('z')-ord('a'); $i++)
			$this->keys[$i + 30] = array("insertChar", array(chr(ord('a')+$i), chr(ord('A')+$i)));

		$this->keys[20] = array("insertChar", array('0', ')'));
		$this->keys[21] = array("insertChar", array('1', '!'));
		$this->keys[22] = array("insertChar", array('2', '@'));
		$this->keys[23] = array("insertChar", array('3', '#'));
		$this->keys[24] = array("insertChar", array('4', '$'));
		$this->keys[25] = array("insertChar", array('5', '%'));
		$this->keys[26] = array("insertChar", array('6', '^'));
		$this->keys[27] = array("insertChar", array('7', '&'));
		$this->keys[28] = array("insertChar", array('8', '*'));
		$this->keys[29] = array("insertChar", array('9', '('));
		$this->keys[9] =  array("insertChar", array(' ', ' '));
		$this->keys[3] =  array("insertChar", array("\n", "\n"));
		$this->keys[1] =  "backspaceChar";
		$this->keys[4] =  "ignoreChar";
		$this->keys[5] =  "ignoreChar";
		
		$this->pkeys = array();
		$this->pkeys[186] = $this->pkeys[41] = array("insertChar", array(';',':'));
    $this->pkeys[187] = $this->pkeys[24] = array("insertChar", array('=','+'));
    $this->pkeys[188] = $this->pkeys[43] = array("insertChar", array(',', '<'));
    $this->pkeys[189] = $this->pkeys[27] = array("insertChar", array('-', '_'));
    $this->pkeys[190] = $this->pkeys[47] = array("insertChar", array('.', '>'));
    $this->pkeys[191] = $this->pkeys[44] = array("insertChar", array('/', '?'));
    $this->pkeys[192] = $this->pkeys[50] = array("insertChar", array('`', '~'));
    
    $this->pkeys[219] = $this->pkeys[33] = array("insertChar", array('[', '{'));
    $this->pkeys[220] = $this->pkeys[42] = array("insertChar", array('\\', '|'));
    $this->pkeys[221] = $this->pkeys[30] = array("insertChar", array(']', '}'));
    $this->pkeys[222] = $this->pkeys[39] = array("insertChar", array("'", '"'));
    $this->pkeys[61] = array("insertChar", array('=', '+'));
    $this->pkeys[59] = array("insertChar", array(';', ':'));
	}	
	
	function KeyDown($obj, $e)
	{
		if ($e->Key <= 29 && $e->Key >= 21 && $e->Ctrl) 
		{
			// Paste known script..
			$this->PasteScript($e->Key - 20);
			return;
		}
		if ($e->Key == 3 && $e->Ctrl) 
		{
			// Execute the code in the window
			$this->ExecuteCode();
			return;
		}
		if ($e->Key == 19 && $e->Ctrl) 
		{
			// Reset the canvas
			$this->ResetCanvas();
			return;
		}
		if ($e->Key == 255)
		{
			// Platform dependent key lookup
			$lookup = $e->PlatformKeyCode;
			$keyarr = $this->pkeys;
		}
		else
		{
			// Known platform independent key
			$lookup = $e->Key;
			$keyarr = $this->keys;
		}								
		if (array_key_exists($lookup, $keyarr))
		{
			$foo = $keyarr[$lookup];
			if (is_array($foo))
				list($foo,$args) = $foo;
			else
				$args = array();
			$argsv = $args;
			if (is_array($argsv)) 
				array_unshift($argsv, $this->txt->Text, $e->Shift); 
			else
				$argsv = array($this->txt->Text, $e->Shift, $args);
			$this->txt->Text = call_user_func_array($foo, $argsv);
		}
		else 
			$this->txt->Text = $this->txt->Text . " [" .$e->Key.", ".$e->PlatformKeyCode."]";
	}
}

/*****************************************************************************/

/**
 * The OnLoad function is called by Phalanger when the Silverlight control
 * loads in the web browser. Global variable $_CANVAS is a reference to the
 * loaded Silverlight control.
 */

function OnLoad()
{
	$app = new InteractivePhp($_CANVAS);
}

?>
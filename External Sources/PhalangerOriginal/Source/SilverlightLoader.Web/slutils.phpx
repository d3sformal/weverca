<?
/*****************************************************************************/
/**
 * Silverlight Utilities for Phalanger
 *
 * This file implements several utilities that simplify development of 
 * Silverlight applications in PHP using Phalanger.
 *
 * @author Tomas Petricek <tomas@tomasp.net>
 * @package slutils
 */
/*****************************************************************************/
 
import namespace System;
import namespace System:::Threading;
import namespace System:::IO;
import namespace System:::IO:::IsolatedStorage;
import namespace System:::Net;
import namespace System:::Windows;
import namespace System:::Windows:::Markup;
import namespace System:::Windows:::Browser;
import namespace System:::Windows:::Shapes;
import namespace System:::Windows:::Controls;
import namespace System:::Windows:::Media;
import namespace System:::Windows:::Input;
import namespace System:::Windows:::Media:::Imaging;
import namespace System:::Windows:::Media:::Animation;


/**
 * This class serves as a proxy for access to Silverlight elements
 * It simplifies access to the 'depenedency properties', so it is possible
 * to write the following code:
 * <code>
 *   $el->{"Canvas.Top"} = 100;
 *   $top = $el->{"Canvas.Top"};
 *
 *   // Instead of:
 *   $el-SetValue(Canvas::$TopProperty, 100);
 *   $top = $el-GetValue(Canvas::$TopProperty);
 * </code>
 */
class ElementWrapper
{
	public $Element;
	var $dppCache = array();
		
	public function __construct($el)
	{
		$this->Element = $el;
	}

	public function getDependencyProp($name)
	{
		if (array_key_exists($name, $this->dppCache))
			$prop = $this->dppCache[$name];
		else
		{
			$prop = eval("return " . str_replace(".", "::$", $name) . "Property;");
			$this->dppCache[$name] = $prop;
		}
		return $prop;
	}
	
	public function __get($name)
	{
		if (strpos($name, "."))
			return $this->Element->GetValue($this->getDependencyProp($name));
		else	
			return $this->Element->$name;
	}

	public function __set($name, $value)
	{
		if (strpos($name, "."))
			$this->Element->SetValue($this->getDependencyProp($name), $value);
		else	
			$this->Element->$name = $value;
	}
	
	public function __call($name, $args)
	{
		return call_user_func_array(array($this->Element, $name), $args);
	}
}


/**
 * This class serves as a proxy for access to Silverlight (top-level) canvas 
 * It simplifies access to the elements present on the canvas, so it is possible
 * to write the following code:
 * <code>
 *   $el = $this->someElement;
 *   // Instead of:
 *   $el = $this->FindName("someElement");
 * </code>
 *
 * The recommended usage is to inherit your 'Application' class from 'CanvasWrapper'
 * and initialize it using the 'parent::__construct($_CANVAS)' call. 
 */
class CanvasWrapper
{
	public $Canvas;
	public $elementCache;
	
	public function __construct($canvas)
  {
		$this->Canvas = $canvas;
		$this->elementCache = array();
	}

	public function __set($name, $value)
	{
		$this->Canvas->$name = $value;
	}
	
	public function __get($name)
	{
		$el = $this->Canvas->FindName($name);
		if ($el != null) 
		{
			if (array_key_exists($name, $this->elementCache))
				return $this->elementCache[$name];
			else
			{
				$ret = new ElementWrapper($el);
				$this->elementCache[$name] = $ret;
				return $ret; 
			}
		}
		else 
			return $this->Canvas->$name;
	}
	
	public function __call($name, $args)
	{
		return call_user_func_array(array($this->Canvas, $name), $args);
	}
}

/*****************************************************************************/

/**
 * Wraps the given Silverlight element into a proxy/wrapper that simplifies
 * access to dependency properties associated with the element.
 */
function slwrap($el)
{
	return new ElementWrapper($el);
}


/*****************************************************************************/

/**
 * Html Wrapper...
 */
class HtmlElementWrapper
{
	public $Element;
	var $dppCache = array();
		
	public function __construct($el)
	{
		$this->Element = $el;
	}

	public function __get($name)
	{
		// todo: getattribtue/getproperty
		return $this->Element->GetProperty($name);
	}

	public function __set($name, $value)
	{
		// todo: setattribtue/setproperty
		return $this->Element->SetProperty($name, $value);
	}
	
	public function __call($name, $args)
	{
		return call_user_func_array(array($this->Element, $name), $args);
	}
}

/**
 * Html Page Wrapper...
 */ 
class HtmlPageWrapper
{
	public $Page;
	public $elementCache;
	
	public function __construct($page)
  {
		$this->Page = $page;
		$this->elementCache = array();
	}

	public function __set($name, $value)
	{
		$this->Page->$name = $value;
	}
	
	public function __get($name)
	{
		$el = $this->Page->GetElementByID($name);
		if ($el != null) 
		{
			if (array_key_exists($name, $this->elementCache))
				return $this->elementCache[$name];
			else
			{
				$ret = new HtmlElementWrapper($el);
				$this->elementCache[$name] = $ret;
				return $ret; 
			}
		}
		else 
			return $this->Page->$name;
	}
	
	public function __call($name, $args)
	{
		return call_user_func_array(array($this->Page, $name), $args);
	}
}

/*****************************************************************************/

function slcreate_x($name, $props, $children = null, $parent = null)
{
  $s = "<$name";
    
  if ($parent != null)
		$s .= " xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"";
  
  foreach($props as $prop => $value)
  {
		if ($prop == "$name.Name") $prop = "x:Name";
    $s .= " $prop=\"$value\"";
  }
  $s .= ">";

  if ($children != null)
  {
		foreach($children as $child)
			$s .= $child;
  }  
  
  $s .= "</$name>";

	if ($parent != null)	    
	{
		$res = slwrap(XamlReader::Load($s));
		
		if ($parent->Children)
			$parent->Children->Add($res->Element);
    else
			$parent->Add($res->Element);
			
    return $res;
  }
  return $s;
}

function slcreate($name, $props, $children = null, $parent = null, $resources = null)
{
/*
	// workaround for Silverlight bugs that prevent us from creating
	// animations directly using the object model
	if ($name == "Storyboard" || $name == "ColorAnimation" || $name == "DoubleAnimation" ||
			$name == "PointAnimation" || $name == "ColorAnimationUsingKeyFrams" || 
			$name == "DoubleAnimationUsingKeyFrams" || $name == "PointAnimationUsingKeyFrams")
		return slcreate_x($name, $props, $children, $parent);
*/
  $ctl = slwrap(new $name);
  foreach($props as $prop => $value)
  {
		// ? how do we know whats the type of the property ?
		// Color
		if ($name == "ColorAnimation" && ($prop == "From" || $prop == "To") && is_string($value))
		{
			if (strlen($value) == 9)
			{
				list($a, $r, $g, $b) = sscanf($value, '#%2x%2x%2x%2x'); 
				$value = Color::FromArgb($a,$r,$g,$b);
			}
			else if (strlen($value) == 7)
			{
				list($r, $g, $b) = sscanf($value, '#%2x%2x%2x'); 
				$value = Color::FromArgb(255,$r,$g,$b);
			}
		}
		
		// Brush
		if ($prop == "Fill" && is_string($value)) 
		{
			if (strlen($value) == 9)
			{
				list($a, $r, $g, $b) = sscanf($value, '#%2x%2x%2x%2x'); 
				$value = new SolidColorBrush(Color::FromArgb($a,$r,$g,$b));
			}
			else if (strlen($value) == 7)
			{
				list($r, $g, $b) = sscanf($value, '#%2x%2x%2x'); 
				$value = new SolidColorBrush(Color::FromArgb(255,$r,$g,$b));
			}
		}
		
		// Storyboard.TargetProperty
		if ($prop == "Storyboard.TargetProperty" && is_string($value))
		{
			$conv = new PropertyPathConverter();
			$value = $conv->ConvertFromString($value);
		}
		
		// Uri
		if ($name == "Image" && $prop == "Source" && is_string($value))
		{	
			$value = new BitmapImage(new Uri($value, UriKind::Relative));
		}
		$ctl->$prop = $value;
	}
  
  if ($children != null)
  {
		foreach($children as $child)
			$ctl->Children->Add($child->Element);
  }  
  if ($parent != null)	    
    $parent->Children->Add($ctl->Element);
  if ($resources != null)	    
    $resources->Add($ctl->{ "FrameworkElement.Name" }, $ctl->Element);
  return $ctl;
}

/*****************************************************************************/



?>
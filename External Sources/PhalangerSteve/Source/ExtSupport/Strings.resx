<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="this_type_mismatch" xml:space="preserve">
    <value>The type of self is different from the declaring class.</value>
  </data>
  <data name="non_external_resource_marshaled" xml:space="preserve">
    <value>Cannot marshal variable of non-external resource type.</value>
  </data>
  <data name="unknown_class_marshaled" xml:space="preserve">
    <value>Cannot marshal the variable - class '{0}' is not defined in module '{1}'.</value>
  </data>
  <data name="unsupported_variable_marshaled" xml:space="preserve">
    <value>Cannot marshal the variable - unsupported type {0}.</value>
  </data>
  <data name="null_zval_marshaled" xml:space="preserve">
    <value>Cannot marshal NULL pNativeData.</value>
  </data>
  <data name="native_ht_marshal_error" xml:space="preserve">
    <value>Cannot marshal array - native hash table reported failure.</value>
  </data>
  <data name="wrapped_class_not_found" xml:space="preserve">
    <value>Cannot marshal the variable - wrapping type of class '{0}' is not available. Check the type definition and managed wrapper for module {1}.</value>
  </data>
  <data name="wrapper_class_instantiation_failed" xml:space="preserve">
    <value>Cannot marshal the variable - instantiation of wrapping type for class '{0}' failed. Check the type definition and managed wrapper for module {1}.</value>
  </data>
  <data name="non_object_incarnated" xml:space="preserve">
    <value>Cannot incarnate the variable - unsupported type {0}.</value>
  </data>
  <data name="managed_native_class_mismatch" xml:space="preserve">
    <value>Class mismatch (managed: '{0}', native: '{1}').</value>
  </data>
  <data name="thread_already_associated_with_request" xml:space="preserve">
    <value>This thread is already associated with a request.</value>
  </data>
  <data name="thread_not_associated_with_cookie" xml:space="preserve">
    <value>This thread is not associated with a request cookie. This should never happen.</value>
  </data>
  <data name="native_stream_already_freed" xml:space="preserve">
    <value>The native stream has already been freed.</value>
  </data>
  <data name="must_be_phalanger_value_type" xml:space="preserve">
    <value>Must be one of the Phalanger value types: Int32, Boolean, Double.</value>
  </data>
  <data name="must_be_phalanger_type" xml:space="preserve">
    <value>Must be one of the Phalanger types.</value>
  </data>
  <data name="invalid_base_class" xml:space="preserve">
    <value>'{0}' internal class has invalid base class. Extension {1} is not compatible with Phalanger.</value>
  </data>
  <data name="invalid_module_context" xml:space="preserve">
    <value>Attempt to get request context when running in module context. This is probably caused by a misbehaving extension.</value>
  </data>
  <data name="invalid_vararg_param" xml:space="preserve">
    <value>'Vararg' optional parameter of function {0} must be at most one and the last one.</value>
  </data>
  <data name="invalid_optional_param" xml:space="preserve">
    <value>All optional parameters must follow all mandatory parameters of function {0}.</value>
  </data>
  <data name="path_to_wrappers_does_not_exist" xml:space="preserve">
    <value>Path to managed wrappers ('{0}') does not exist.</value>
  </data>
  <data name="could_not_save_wrapper" xml:space="preserve">
    <value>Attempt to save wrapper assembly {0} to directory '{1}' failed ({2}).</value>
  </data>
  <data name="invalid_typedef_path" xml:space="preserve">
    <value>Path to XML type definitions ('{0}') contains invalid characters.</value>
  </data>
  <data name="class_already_defined" xml:space="preserve">
    <value>Class '{0}' already defined in '{1}'.</value>
  </data>
  <data name="typedef_not_found" xml:space="preserve">
    <value>Type definition file {0} not found. Using defaults.</value>
  </data>
  <data name="typedef_not_validated" xml:space="preserve">
    <value>Type definition file {0} could not be validated ({1}). Using defaults.</value>
  </data>
  <data name="typedef_not_parsed" xml:space="preserve">
    <value>Type definition file {0} could not be parsed ({1}) Using defaults.</value>
  </data>
  <data name="constructor_static" xml:space="preserve">
    <value>Constructor {0}::{1} cannot be static.</value>
  </data>
  <data name="function_static" xml:space="preserve">
    <value>Function {0} cannot be static.</value>
  </data>
  <data name="error_during_extension_loading" xml:space="preserve">
    <value>An error occurred while loading extension {0}: {1}</value>
  </data>
  <data name="new_this_type_mismatch" xml:space="preserve">
    <value>The type of new "this" is different from the declaring class. This extension is not compatible with Phalanger."</value>
  </data>
  <data name="invalid_extension_path" xml:space="preserve">
    <value>The path to extension '{0}' contains invalid characters.</value>
  </data>
  <data name="get_module_not_found" xml:space="preserve">
    <value>get_module exported symbol not found, the file does not look like a PHP extension.</value>
  </data>
  <data name="get_module_returned_null" xml:space="preserve">
    <value>get_module returned null, this extension is broken.</value>
  </data>
  <data name="extension_version_mismatch" xml:space="preserve">
    <value>Wrong extension version debug={0}, zts={1}, api={2}, ExtManager supports debug={3}, zts={4}, api={5}.</value>
  </data>
  <data name="module_startup_func_failed" xml:space="preserve">
    <value>module_startup_func has failed. This extension is broken.</value>
  </data>
  <data name="module_shutdown_func_failed" xml:space="preserve">
    <value>module_shutdown_func has failed. This extension is broken.</value>
  </data>
  <data name="parameter_must_be_byref" xml:space="preserve">
    <value>Parameter '{0}' must be passed by reference</value>
  </data>
  <data name="new_this_is_null" xml:space="preserve">
    <value>New "this" is null. This extension is not compatible with PHP.NET</value>
  </data>
  <data name="request_startup_func_failed" xml:space="preserve">
    <value>request_startup_func for extension '{0}' has failed</value>
  </data>
  <data name="request_shutdown_func_failed" xml:space="preserve">
    <value>request_shutdown_func for extension '{0}' has failed</value>
  </data>
  <data name="undefined_external_module_called" xml:space="preserve">
    <value>Call to undefined external function '{0}', extension '{1}' (extension not found)</value>
  </data>
  <data name="undefined_external_class_called" xml:space="preserve">
    <value>Call to undefined external function '{0}', extension '{1}' (class not found)</value>
  </data>
  <data name="undefined_external_function_called" xml:space="preserve">
    <value>Call to undefined external function '{0}', extension '{1}' (function not found)</value>
  </data>
  <data name="extension_not_loaded" xml:space="preserve">
    <value>Extension '{0}' is not loaded.</value>
  </data>
  <data name="could_not_initialize_phpts" xml:space="preserve">
    <value>Could not initialize original native PHP{0}TS.</value>
  </data>
</root>
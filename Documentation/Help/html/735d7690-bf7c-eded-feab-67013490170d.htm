<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><link rel="SHORTCUT ICON" href="./../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="./../styles/branding.css" /><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" /><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>TypeConversion.TryConvertToBoolean(T) Method (FlowOutputSet, IntervalValue(T), BooleanValue)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Weverca.Analysis.ExpressionEvaluator.TypeConversion.TryConvertToBoolean``1(Weverca.AnalysisFramework.FlowOutputSet,Weverca.AnalysisFramework.Memory.IntervalValue{``0},Weverca.AnalysisFramework.Memory.BooleanValue@)" /><meta name="Description" content="Tries to convert possible interval of numbers to an equivalent boolean value." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="'true'" /><meta name="container" content="Weverca.Analysis.ExpressionEvaluator" /><meta name="file" content="735d7690-bf7c-eded-feab-67013490170d" /><meta name="guid" content="735d7690-bf7c-eded-feab-67013490170d" /><meta name="SelfBranded" content="true" /></head><body onload="onLoad()" class="primary-mtps-offline-document"><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn">TypeConversion<span id="ID0ELBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ELBABAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>TryConvertToBoolean<span id="ID0EJBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EJBABAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script><span class="typeparameter">T</span><span id="ID0EHBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EHBABAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script> Method (FlowOutputSet, IntervalValue<span id="ID0EFBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EFBABAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script><span class="typeparameter">T</span><span id="ID0EDBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDBABAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script>, BooleanValue<span id="ID0EBBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBABAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script>)</td><td class="OH_tdRunningTitleColumn">A Sandcastle Documented Class Library</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="summary">
            Tries to convert possible interval of numbers to an equivalent boolean value.
            </div><p></p><strong>Namespace:</strong> <a href="bea84e0d-5d29-cab3-72d8-bdf042caa9b7.htm" target="">Weverca.Analysis.ExpressionEvaluator</a><br /><strong>Assembly:</strong> <span sdata="assembly">Weverca.Analysis</span> (in Weverca.Analysis.dll) Version: 1.0.0.0 (1.0.0.0)<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="snippetGroup_Syntax" class="code"><div id="ID0EDKCAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EDKCAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EDKCAAAAA_tabimgleft"></div><div id="ID0EDKCAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EDKCAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EDKCAAAAA_tab2" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EDKCAAAAA','Visual Basic','2','4');return false;">VB</a></div><div id="ID0EDKCAAAAA_tab3" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EDKCAAAAA','Visual C++','3','4');return false;">C++</a></div><div id="ID0EDKCAAAAA_tab4" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EDKCAAAAA','F#','4','4');return false;">F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EDKCAAAAA_tabimgright"></div></div><div id="ID0EDKCAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EDKCAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EDKCAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EDKCAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EDKCAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EDKCAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EDKCAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EDKCAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">bool</span> <span class="identifier">TryConvertToBoolean</span>&lt;T&gt;(
	<span class="identifier">FlowOutputSet</span> <span class="parameter">outset</span>,
	<span class="identifier">IntervalValue</span>&lt;T&gt; <span class="parameter">value</span>,
	<span class="keyword">out</span> <span class="identifier">BooleanValue</span> <span class="parameter">convertedValue</span>
)
<span class="keyword">where</span> T : <span class="identifier">Object</span>, <span class="identifier">IComparable</span>, <span class="identifier">IComparable</span>&lt;T&gt;, <span class="identifier">IEquatable</span>&lt;T&gt;</pre></div><div id="ID0EDKCAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>public static bool TryConvertToBoolean&lt;T&gt;(
	FlowOutputSet outset,
	IntervalValue&lt;T&gt; value,
	out BooleanValue convertedValue
)
where T : Object, IComparable, IComparable&lt;T&gt;, IEquatable&lt;T&gt;</pre></div><div id="ID0EDKCAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">TryConvertToBoolean</span>(<span class="keyword">Of</span> T <span class="keyword">As</span> {<span class="identifier">Object</span>, <span class="identifier">IComparable</span>, <span class="identifier">IComparable</span>(<span class="keyword">Of</span> T), <span class="identifier">IEquatable</span>(<span class="keyword">Of</span> T)}) ( 
	<span class="parameter">outset</span> <span class="keyword">As</span> <span class="identifier">FlowOutputSet</span>,
	<span class="parameter">value</span> <span class="keyword">As</span> <span class="identifier">IntervalValue</span>(<span class="keyword">Of</span> T),
	&lt;<span class="identifier">OutAttribute</span>&gt; <span class="keyword">ByRef</span> <span class="parameter">convertedValue</span> <span class="keyword">As</span> <span class="identifier">BooleanValue</span>
) <span class="keyword">As</span> <span class="identifier">Boolean</span></pre></div><div id="ID0EDKCAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>Public Shared Function TryConvertToBoolean(Of T As {Object, IComparable, IComparable(Of T), IEquatable(Of T)}) ( 
	outset As FlowOutputSet,
	value As IntervalValue(Of T),
	&lt;OutAttribute&gt; ByRef convertedValue As BooleanValue
) As Boolean</pre></div><div id="ID0EDKCAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre><span class="keyword">public</span>:
<span class="keyword">generic</span>&lt;<span class="keyword">typename</span> T&gt;
<span class="keyword">where</span> T : <span class="identifier">Object</span>, <span class="identifier">IComparable</span>, <span class="identifier">IComparable</span>&lt;T&gt;, <span class="identifier">IEquatable</span>&lt;T&gt;
<span class="keyword">static</span> <span class="identifier">bool</span> <span class="identifier">TryConvertToBoolean</span>(
	<span class="identifier">FlowOutputSet</span>^ <span class="parameter">outset</span>, 
	<span class="identifier">IntervalValue</span>&lt;T&gt;^ <span class="parameter">value</span>, 
	[<span class="identifier">OutAttribute</span>] <span class="identifier">BooleanValue</span>^% <span class="parameter">convertedValue</span>
)</pre></div><div id="ID0EDKCAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre>public:
generic&lt;typename T&gt;
where T : Object, IComparable, IComparable&lt;T&gt;, IEquatable&lt;T&gt;
static bool TryConvertToBoolean(
	FlowOutputSet^ outset, 
	IntervalValue&lt;T&gt;^ value, 
	[OutAttribute] BooleanValue^% convertedValue
)</pre></div><div id="ID0EDKCAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre><span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">TryConvertToBoolean</span> : 
        <span class="parameter">outset</span> : <span class="identifier">FlowOutputSet</span> * 
        <span class="parameter">value</span> : <span class="identifier">IntervalValue</span>&lt;'T&gt; * 
        <span class="parameter">convertedValue</span> : <span class="identifier">BooleanValue</span> <span class="keyword">byref</span> <span class="keyword">-&gt;</span> <span class="identifier">bool</span>  <span class="keyword">when</span> 'T : <span class="identifier">Object</span> and <span class="identifier">IComparable</span> and <span class="identifier">IComparable</span>&lt;'T&gt; and <span class="identifier">IEquatable</span>&lt;'T&gt;</pre></div><div id="ID0EDKCAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre>static member TryConvertToBoolean : 
        outset : FlowOutputSet * 
        value : IntervalValue&lt;'T&gt; * 
        convertedValue : BooleanValue byref -&gt; bool  when 'T : Object and IComparable and IComparable&lt;'T&gt; and IEquatable&lt;'T&gt;</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EDKCAAAAA');</script></div><div id="parameters"><h4 class="subHeading">Parameters</h4><dl paramName="outset"><dt><span class="parameter">outset</span></dt><dd>Type: <a href="03685608-c58b-fd83-90a0-47fc33ba5a12.htm" target="">Weverca.AnalysisFramework<span id="ID0EBCACJCAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBCACJCAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>FlowOutputSet</a><br /><span>Output set of a program point.</span></dd></dl><dl paramName="value"><dt><span class="parameter">value</span></dt><dd>Type: <a href="4dba7774-57f1-8a50-f96e-7af994985ab5.htm" target="">Weverca.AnalysisFramework.Memory<span id="ID0EBFABJCAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBFABJCAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>IntervalValue</a><span id="ID0EEABJCAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEABJCAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script><span class="selflink"><span class="typeparam">T</span></span><span id="ID0ECABJCAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABJCAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script><br /><span>Value representing interval of numbers to convert.</span></dd></dl><dl paramName="convertedValue"><dt><span class="parameter">convertedValue</span></dt><dd>Type: <a href="b366fe50-9ae1-61f6-4dbb-2ff87cf9f315.htm" target="">Weverca.AnalysisFramework.Memory<span id="ID0EBDAAJCAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBDAAJCAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>BooleanValue</a><span id="ID0ECAAJCAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECAAJCAAAAA?vb=|cpp=%|cs=|fs=|nu=");
				</script><br /><span><span class="code">true</span> if interval does not contain zero,
            <span class="code">false</span> if interval consists only from zero value or <span class="code">null</span> otherwise.
            </span></dd></dl></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Type Parameters</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><dl><dt><span class="parameter">T</span></dt><dd>Type of values represented by interval.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">Boolean</a><br /><span class="code">true</span> if value is converted successfully, otherwise <span class="code">false</span>.<a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div class="seeAlsoStyle"><a href="86143544-0149-a0d5-6964-af3dc2ef1dd1.htm" target="">TypeConversion Class</a></div><div class="seeAlsoStyle"><a href="86ef579a-3d9f-a388-027d-15ca30b3fb27.htm" target="">TypeConversion Members</a></div><div class="seeAlsoStyle"><a href="8a40c1f0-d05d-8bc0-77f4-d175fb8987f4.htm" target="">TryConvertToBoolean Overload</a></div><div class="seeAlsoStyle"><a href="bea84e0d-5d29-cab3-72d8-bdf042caa9b7.htm" target="">Weverca.Analysis.ExpressionEvaluator Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p /><div class="OH_feedbacklink"><a href="mailto:?subject=A+Sandcastle+Documented+Class+Library+TypeConversion.TryConvertToBoolean(T)+Method+(FlowOutputSet%2c+IntervalValue(T)%2c+BooleanValue)+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic.</div></div></body></html>
digraph g {node [shape=box]
 graph[rankdir="TB", concentrate=true];node0[label="getValidationRules
$object = new $className()
return array(
		'required' => $object->fieldsRequired,
		'size' => $object->fieldsSize,
		'validate' => $object->fieldsValidate,
		'requiredLang' => $object->fieldsRequiredLang,
		'sizeLang' => $object->fieldsSizeLang,
		'validateLang' => $object->fieldsValidateLang);
"]
node1[label="getFields
return array();
"]
node2[label="__construct
"]
node3[label="save
return (int)($this->id) > 0 ? $this->update($nullValues) : $this->add($autodate, $nullValues);
"]
node4[label="add
"]
node5[label="update
"]
node6[label="delete
"]
node7[label="deleteSelection
"]
node8[label="toggleStatus
"]
node9[label="getTranslationsFields
"]
node10[label="makeTranslationFields
$fields[$id_language]['id_lang'] = $id_language
$fields[$id_language][$this->identifier] = (int)($this->id)
"]
node11[label="validateFields
$fieldsRequired = array_merge($this->fieldsRequired, (isset(self::$fieldsRequiredDatabase[get_class($this)]) ? self::$fieldsRequiredDatabase[get_class($this)] : array()))
"]
node12[label="validateFieldsLang
$defaultLanguage = (int)(Configuration::get('PS_LANG_DEFAULT'))
"]
node13[label="displayFieldName
global $_FIELDS, $cookie;
$iso = strtolower(Language::getIsoById($cookie->id_lang ? (int)$cookie->id_lang : Configuration::get('PS_LANG_DEFAULT')))
@include(_PS_TRANSLATIONS_DIR_.$iso.'/fields.php')
$key = $className.'_'.md5($field)
return ((is_array($_FIELDS) AND array_key_exists($key, $_FIELDS)) ? ($htmlentities ? htmlentities($_FIELDS[$key], ENT_QUOTES, 'utf-8') : $_FIELDS[$key]) : $field);
"]
node14[label="validateControler
return $this->validateController($htmlentities);
"]
node15[label="validateController
$errors = array()
$fieldsRequired = array_merge($this->fieldsRequired, (isset(self::$fieldsRequiredDatabase[get_class($this)]) ? self::$fieldsRequiredDatabase[get_class($this)] : array()))
"]
node16[label="getWebserviceParameters
$defaultResourceParameters = array(
			'objectSqlId' => $this->identifier,
			'retrieveData' => array(
				'className' => get_class($this),
				'retrieveMethod' => 'getWebserviceObjectList',
				'params' => array(),
				'table' => $this->table,
			),
			'fields' => array(
				'id' => array('sqlId' => $this->identifier, 'i18n' => false),
			),
		)
"]
node17[label="getWebserviceObjectList
$query = '
		SELECT DISTINCT main.`'.$this->identifier.'` FROM `'._DB_PREFIX_.$this->table.'` AS main
		'.$sql_join.'
		WHERE 1 '.$sql_filter.'
		'.($sql_sort != '' ? $sql_sort : '').'
		'.($sql_limit != '' ? $sql_limit : '').'
		'
return Db::getInstance(_PS_USE_SQL_SLAVE_)->ExecuteS($query);
"]
node18[label="getFieldsRequiredDatabase
return Db::getInstance()->ExecuteS('
		SELECT id_required_field, object_name, field_name
		FROM '._DB_PREFIX_.'required_field
		'.(!$all ? 'WHERE object_name = \''.pSQL(get_class($this)).'\'' : ''));
"]
node19[label="addFieldsRequiredDatabase
"]
node20[label="clearCache
"]
node21[label="deleteImage
"]
node22[label="existsInDatabase
"]
node23[label="$id
$id_lang
$table
$identifier
$fieldsRequired
$fieldsRequiredDatabase
$fieldsSize
$fieldsValidate
$fieldsRequiredLang
$fieldsSizeLang
$fieldsValidateLang
$tables
$webserviceParameters
$_cache
$image_dir
$image_format
getValidationRules
getFields
__construct
save
add
update
delete
deleteSelection
toggleStatus
getTranslationsFields
makeTranslationFields
validateFields
validateFieldsLang
displayFieldName
validateControler
validateController
getWebserviceParameters
getWebserviceObjectList
getFieldsRequiredDatabase
addFieldsRequiredDatabase
clearCache
deleteImage
existsInDatabase
"]
node24[label=""]
node25[label=""]
node26[label="$this->id_lang = $id_lang
"]
node27[label=""]
node28[label=""]
node29[label="die(Tools::displayError('not table or identifier : ').$this->table)
"]
node30[label=""]
node31[label="die(Tools::displayError())
"]
node32[label="$this->clearCache()
"]
node33[label="die(Tools::displayError())
"]
node34[label="$this->clearCache()
$result = Db::getInstance()->Execute('DELETE FROM `'.pSQL(_DB_PREFIX_.$this->table).'` WHERE `'.pSQL($this->identifier).'` = '.(int)($this->id))
"]
node35[label="die(Tools::displayError())
"]
node36[label="$result = true
"]
node37[label="die(Tools::displayError())
"]
node38[label=""]
node39[label="die(Tools::displayError('identifier is not table or identifier : ').Tools::safeOutput($this->identifier))
"]
node40[label="$fields = array()
"]
node41[label="foreach ($fieldsArray as $field)
		{
			/* Check fields validity */
			if (!Validate::isTableOrIdentifier($field))
				die(Tools::displayError());

			/* Copy the field, or the default language field if it's both required and empty */
			if ((!$this->id_lang AND isset($this->{$field}[$id_language]) AND !empty($this->{$field}[$id_language])) 
			OR ($this->id_lang AND isset($this->$field) AND !empty($this->$field)))
				$fields[$id_language][$field] = $this->id_lang ? pSQL($this->$field) : pSQL($this->{$field}[$id_language]);
			elseif (in_array($field, $this->fieldsRequiredLang))
				$fields[$id_language][$field] = $this->id_lang ? pSQL($this->$field) : pSQL($this->{$field}[Configuration::get('PS_LANG_DEFAULT')]);
			else
				$fields[$id_language][$field] = '';
		}
"]
node42[label="foreach ($fieldsRequired as $field)
			if (Tools::isEmpty($this->{$field}) AND (!is_numeric($this->{$field})))
			{
				if ($die) die (Tools::displayError().' ('.Tools::safeOutput(get_class($this)).' -> '.Tools::safeOutput($field).' is empty)');
				return $errorReturn ? get_class($this).' -> '.$field.' is empty' : false;
			}
"]
node43[label="foreach ($this->fieldsRequiredLang as $fieldArray)
		{
			if (!is_array($this->{$fieldArray}))
				continue ;
			if (!$this->{$fieldArray} OR !sizeof($this->{$fieldArray}) OR ($this->{$fieldArray}[$defaultLanguage] !== '0' AND empty($this->{$fieldArray}[$defaultLanguage])))
			{
				if ($die) die (Tools::displayError().' ('.Tools::safeOutput(get_class($this)).'->'.Tools::safeOutput($fieldArray).' '.Tools::displayError('is empty for default language.').')');
				return $errorReturn ? get_class($this).'->'.$fieldArray.' '.Tools::displayError('is empty for default language.') : false;
			}
		}
"]
node44[label=""]
node45[label=""]
node46[label="foreach ($fieldsRequired AS $field)
		if (($value = Tools::getValue($field, $this->{$field})) == false AND (string)$value != '0')
			if (!$this->id OR $field != 'passwd')
				$errors[] = '<b>'.self::displayFieldName($field, get_class($this), $htmlentities).'</b> '.Tools::displayError('is required.');
"]
node47[label="$wsParamsAttributeName = 'webserviceParameters'
"]
node48[label=""]
node49[label=""]
node50[label=""]
node51[label="return false;
"]
node52[label=""]
node53[label="$_cache[$this->table]
"]
node54[label=""]
node55[label="return false;
"]
node56[label=""]
node57[label="$field = 'order'
"]
node58[label="$field = $table
"]
node59[label=""]
node60[label=""]
node61[label=""]
node62[label=""]
node63[label="$this->id_lang = Configuration::get('PS_LANG_DEFAULT')
"]
node64[label=""]
node65[label="$this->date_add = date('Y-m-d H:i:s')
"]
node66[label=""]
node67[label="$this->date_upd = date('Y-m-d H:i:s')
"]
node68[label=""]
node69[label="return false;
"]
node70[label=""]
node71[label="foreach ($selection AS $id)
		{
			$this->id = (int)($id);
			$result = $result AND $this->delete();
		}
"]
node72[label="$this->active = (int)(!$this->active)
return Db::getInstance()->Execute('
		UPDATE `'.pSQL(_DB_PREFIX_.$this->table).'`
		SET `active` = !`active`
		WHERE `'.pSQL($this->identifier).'` = '.(int)($this->id));
"]
node73[label="die(Tools::displayError())
"]
node74[label="foreach (Language::getLanguages(false) as $language)
				$this->makeTranslationFields($fields, $fieldsArray, $language['id_lang']);
"]
node75[label="$this->makeTranslationFields($fields, $fieldsArray, $this->id_lang)
"]
node76[label=""]
node77[label=""]
node78[label="$fields[$id_language][$field] = $this->id_lang ? pSQL($this->$field) : pSQL($this->{$field}[$id_language])
"]
node79[label="$fields[$id_language][$field] = $this->id_lang ? pSQL($this->$field) : pSQL($this->{$field}[Configuration::get('PS_LANG_DEFAULT')])
"]
node80[label="$fields[$id_language][$field] = ''
"]
node81[label=""]
node82[label="foreach ($this->fieldsSize as $field => $size)
			if (isset($this->{$field}) AND Tools::strlen($this->{$field}) > $size)
			{
				if ($die) die (Tools::displayError().' ('.Tools::safeOutput(get_class($this)).' -> '.Tools::safeOutput($field).' Length '.Tools::safeOutput($size).')');
				return $errorReturn ? get_class($this).' -> '.$field.' Length '.$size : false;
			}
"]
node83[label=""]
node84[label=""]
node85[label="foreach ($this->fieldsSizeLang as $fieldArray => $size)
		{
			if (!is_array($this->{$fieldArray}))
				continue ;
			foreach ($this->{$fieldArray} as $k => $value)
				if (Tools::strlen($value) > $size)
				{
					if ($die) die (Tools::displayError().' ('.Tools::safeOutput(get_class($this)).'->'.Tools::safeOutput($fieldArray).' '.Tools::displayError('Length').' '.Tools::safeOutput($size).' '.Tools::displayError('for language').')');
					return $errorReturn ? get_class($this).'->'.$fieldArray.' '.Tools::displayError('Length').' '.$size.' '.Tools::displayError('for language') : false;
				}
		}
"]
node86[label=""]
node87[label=""]
node88[label=""]
node89[label=""]
node90[label=""]
node91[label="foreach ($this->fieldsSize AS $field => $maxLength)
			if (($value = Tools::getValue($field, $this->{$field})) AND Tools::strlen($value) > $maxLength)
				$errors[] = '<b>'.self::displayFieldName($field, get_class($this), $htmlentities).'</b> '.Tools::displayError('is too long.').' ('.Tools::displayError('Maximum length:').' '.$maxLength.')';
"]
node92[label="$errors[] = '<b>'.self::displayFieldName($field, get_class($this), $htmlentities).'</b> '.Tools::displayError('is required.')
"]
node93[label=""]
node94[label="$defaultResourceParameters['objectNodeName'] = $this->table
"]
node95[label=""]
node96[label=""]
node97[label=""]
node98[label=""]
node99[label="return false;
"]
node100[label="foreach ($fields AS $field)
			if (!Db::getInstance()->AutoExecute(_DB_PREFIX_.'required_field', array('object_name' => pSQL(get_class($this)), 'field_name' => pSQL($field)), 'INSERT'))
				return false;
"]
node101[label=""]
node102[label=""]
node103[label="$_cache[$this->table][(int)$this->id]
"]
node104[label=""]
node105[label=""]
node106[label=""]
node107[label=""]
node108[label="$row = Db::getInstance()->getRow('
		SELECT `id_'.$field.'` as id
		FROM `'._DB_PREFIX_.$table.'` e
		WHERE e.`id_'.$field.'` = '.(int)($id_entity))
return isset($row['id']);
"]
node109[label="die(Tools::displayError())
"]
node110[label="$this->identifier = pSQL($this->identifier)
"]
node111[label="$this->date_upd = date('Y-m-d H:i:s')
"]
node112[label=""]
node113[label="$result = Db::getInstance()->autoExecuteWithNullValues(_DB_PREFIX_.$this->table, $this->getFields(), 'UPDATE', '`'.pSQL($this->identifier).'` = '.(int)($this->id))
"]
node114[label="$result = Db::getInstance()->autoExecute(_DB_PREFIX_.$this->table, $this->getFields(), 'UPDATE', '`'.pSQL($this->identifier).'` = '.(int)($this->id))
"]
node115[label=""]
node116[label="Db::getInstance()->Execute('DELETE FROM `'.pSQL(_DB_PREFIX_.$this->table).'_lang` WHERE `'.pSQL($this->identifier).'` = '.(int)($this->id))
"]
node117[label="return $result;
"]
node118[label=""]
node119[label="$this->id = (int)($id)
$result = $result AND $this->delete()
"]
node120[label="return $result;
"]
node121[label=""]
node122[label="$this->makeTranslationFields($fields, $fieldsArray, $language['id_lang'])
"]
node123[label="return $fields;
"]
node124[label="die(Tools::displayError())
"]
node125[label=""]
node126[label=""]
node127[label=""]
node128[label=""]
node129[label="$validate = new Validate()
"]
node130[label=""]
node131[label="foreach ($result AS $key => $value)
					if (key_exists($key, $this))
						$this->{$key} = $value;
"]
node132[label=""]
node133[label="$validate = new Validate()
"]
node134[label="foreach ($this->{$fieldArray} as $k => $value)
				if (Tools::strlen($value) > $size)
				{
					if ($die) die (Tools::displayError().' ('.Tools::safeOutput(get_class($this)).'->'.Tools::safeOutput($fieldArray).' '.Tools::displayError('Length').' '.Tools::safeOutput($size).' '.Tools::displayError('for language').')');
					return $errorReturn ? get_class($this).'->'.$fieldArray.' '.Tools::displayError('Length').' '.$size.' '.Tools::displayError('for language') : false;
				}
"]
node135[label=""]
node136[label=""]
node137[label=""]
node138[label=""]
node139[label=""]
node140[label="$defaultResourceParameters['objectsNodeName'] = $this->table.'s'
"]
node141[label=""]
node142[label="return false;
"]
node143[label="return true;
"]
node144[label=""]
node145[label=""]
node146[label=""]
node147[label=""]
node148[label="return false;
"]
node149[label="return false;
"]
node150[label="return false;
"]
node151[label="return false;
"]
node152[label="return true;
"]
node153[label=""]
node154[label=""]
node155[label=""]
node156[label=""]
node157[label=""]
node158[label=""]
node159[label="$result = Db::getInstance()->autoExecuteWithNullValues(_DB_PREFIX_.$this->table, $this->getFields(), 'INSERT')
"]
node160[label="$result = Db::getInstance()->autoExecute(_DB_PREFIX_.$this->table, $this->getFields(), 'INSERT')
"]
node161[label=""]
node162[label=""]
node163[label=""]
node164[label=""]
node165[label=""]
node166[label="die (Tools::displayError().' ('.Tools::safeOutput(get_class($this)).' -> '.Tools::safeOutput($field).' is empty)')
"]
node167[label="return $errorReturn ? get_class($this).' -> '.$field.' is empty' : false;
"]
node168[label=""]
node169[label="foreach ($this->fieldsValidate as $field => $method)
			if (!method_exists($validate, $method))
				die (Tools::displayError('Validation function not found.').' '.$method);
			elseif (!empty($this->{$field}) AND !call_user_func(array('Validate', $method), $this->{$field}))
			{
				if ($die) die (Tools::displayError().' ('.Tools::safeOutput(get_class($this)).' -> '.Tools::safeOutput($field).' = '.Tools::safeOutput($this->{$field}).')');
				return $errorReturn ? get_class($this).' -> '.$field.' = '.$this->{$field} : false;
			}
"]
node170[label=""]
node171[label=""]
node172[label="$this->id = (int)($id)
"]
node173[label="$this->{$key} = $value
"]
node174[label=""]
node175[label="foreach ($this->fieldsValidateLang as $fieldArray => $method)
		{
			if (!is_array($this->{$fieldArray}))
				continue ;
			foreach ($this->{$fieldArray} as $k => $value)
				if (!method_exists($validate, $method))
					die (Tools::displayError('Validation function not found.').' '.Tools::safeOutput($method));
				elseif (!empty($value) AND !call_user_func(array('Validate', $method), $value))
				{
					if ($die) die (Tools::displayError('The following field is invalid according to the validate method ').'<b>'.Tools::safeOutput($method).'</b>:<br/> ('.Tools::safeOutput(get_class($this)).'->'.Tools::safeOutput($fieldArray).' = '.Tools::safeOutput($value).' '.Tools::displayError('for language').' '.Tools::safeOutput($k).')');
					return $errorReturn ? Tools::displayError('The following field is invalid according to the validate method ').'<b>'.$method.'</b>:<br/> ('. get_class($this).'->'.$fieldArray.' = '.$value.' '.Tools::displayError('for language').' '.$k : false;
				}
		}
"]
node176[label=""]
node177[label=""]
node178[label=""]
node179[label="die (Tools::displayError().' ('.Tools::safeOutput(get_class($this)).'->'.Tools::safeOutput($fieldArray).' '.Tools::displayError('is empty for default language.').')')
"]
node180[label="return $errorReturn ? get_class($this).'->'.$fieldArray.' '.Tools::displayError('is empty for default language.') : false;
"]
node181[label="$errors[] = '<b>'.self::displayFieldName($field, get_class($this), $htmlentities).'</b> '.Tools::displayError('is too long.').' ('.Tools::displayError('Maximum length:').' '.$maxLength.')'
"]
node182[label=""]
node183[label="foreach ($this->fieldsValidate AS $field => $function)
		{
			// Hack for postcode required for country which does not have postcodes
			if ($value = Tools::getValue($field, $this->{$field}) OR ($field == 'postcode' AND $value == '0'))
			{
				if (!Validate::$function($value))
					$errors[] = '<b>'.self::displayFieldName($field, get_class($this), $htmlentities).'</b> '.Tools::displayError('is invalid.');
				else
				{
					if ($field == 'passwd')
					{
						if ($value = Tools::getValue($field))
							$this->{$field} = Tools::encrypt($value);
					}
					else
						$this->{$field} = $value;
				}
			}
		}
"]
node184[label="foreach ($this->{$wsParamsAttributeName}['associations'] as $assocName => &$association)
			{
				if (!array_key_exists('setter', $association) || (isset($association['setter']) && !$association['setter']))
					$association['setter'] = Tools::toCamelCase('set_ws_'.$assocName);
				if (!array_key_exists('getter', $association))
					$association['getter'] = Tools::toCamelCase('get_ws_'.$assocName);
			}
"]
node185[label=""]
node186[label=""]
node187[label="foreach ($types AS $image_type)
			if (file_exists($this->image_dir.$this->id.'-'.stripslashes($image_type['name']).'.'.$this->image_format) 
			&& !unlink($this->image_dir.$this->id.'-'.stripslashes($image_type['name']).'.'.$this->image_format))
				return false;
"]
node188[label="$types = ImageType::getImagesTypes()
"]
node189[label=""]
node190[label=""]
node191[label="self::$_cache[$this->table][(int)($id)][(int)($id_lang)] = Db::getInstance()->getRow('
				SELECT *
				FROM `'._DB_PREFIX_.$this->table.'` a '.
				($id_lang ? ('LEFT JOIN `'.pSQL(_DB_PREFIX_.$this->table).'_lang` b ON (a.`'.$this->identifier.'` = b.`'.$this->identifier).'` AND `id_lang` = '.(int)($id_lang).')' : '')
				.' WHERE a.`'.$this->identifier.'` = '.(int)($id))
"]
node192[label="$result = self::$_cache[$this->table][(int)($id)][(int)($id_lang)]
"]
node193[label="$fields = $this->getfieldsRequiredDatabase(true)
"]
node194[label=""]
node195[label="$result = Db::getInstance()->ExecuteS('
					SELECT * 
					FROM `'.pSQL(_DB_PREFIX_.$this->table).'_lang` 
					WHERE `'.$this->identifier.'` = '.(int)$id)
"]
node196[label="foreach ($result AS $row)
							foreach ($row AS $key => $value)
								if (key_exists($key, $this) AND $key != $this->identifier)
								{
									if (!is_array($this->{$key}))
										$this->{$key} = array();
									$this->{$key}[(int)$row['id_lang']] = $value;
								}
"]
node197[label=""]
node198[label="return false;
"]
node199[label=""]
node200[label=""]
node201[label=""]
node202[label=""]
node203[label="die (Tools::displayError().' ('.Tools::safeOutput(get_class($this)).' -> '.Tools::safeOutput($field).' Length '.Tools::safeOutput($size).')')
"]
node204[label="return $errorReturn ? get_class($this).' -> '.$field.' Length '.$size : false;
"]
node205[label=""]
node206[label="return true;
"]
node207[label="die (Tools::displayError('Validation function not found.').' '.$method)
"]
node208[label=""]
node209[label=""]
node210[label="foreach ($this->{$fieldArray} as $k => $value)
				if (!method_exists($validate, $method))
					die (Tools::displayError('Validation function not found.').' '.Tools::safeOutput($method));
				elseif (!empty($value) AND !call_user_func(array('Validate', $method), $value))
				{
					if ($die) die (Tools::displayError('The following field is invalid according to the validate method ').'<b>'.Tools::safeOutput($method).'</b>:<br/> ('.Tools::safeOutput(get_class($this)).'->'.Tools::safeOutput($fieldArray).' = '.Tools::safeOutput($value).' '.Tools::displayError('for language').' '.Tools::safeOutput($k).')');
					return $errorReturn ? Tools::displayError('The following field is invalid according to the validate method ').'<b>'.$method.'</b>:<br/> ('. get_class($this).'->'.$fieldArray.' = '.$value.' '.Tools::displayError('for language').' '.$k : false;
				}
"]
node211[label="return true;
"]
node212[label=""]
node213[label=""]
node214[label=""]
node215[label="return $errors;
"]
node216[label=""]
node217[label=""]
node218[label=""]
node219[label=""]
node220[label="$defaultResourceParameters['retrieveData']['retrieveMethod']
"]
node221[label=""]
node222[label=""]
node223[label=""]
node224[label="foreach ($fields AS $row)
					self::$fieldsRequiredDatabase[$row['object_name']][(int)$row['id_required_field']] = pSQL($row['field_name']);
"]
node225[label="self::$fieldsRequiredDatabase = array()
"]
node226[label="foreach ($row AS $key => $value)
								if (key_exists($key, $this) AND $key != $this->identifier)
								{
									if (!is_array($this->{$key}))
										$this->{$key} = array();
									$this->{$key}[(int)$row['id_lang']] = $value;
								}
"]
node227[label="return false;
"]
node228[label="$this->id = Db::getInstance()->Insert_ID()
"]
node229[label=""]
node230[label="$fields = $this->getTranslationsFieldsChild()
"]
node231[label="return $result;
"]
node232[label=""]
node233[label="return $errorReturn ? get_class($this).' -> '.$field.' = '.$this->{$field} : false;
"]
node234[label=""]
node235[label=""]
node236[label=""]
node237[label=""]
node238[label="die (Tools::displayError('Validation function not found.').' '.Tools::safeOutput($method))
"]
node239[label=""]
node240[label=""]
node241[label="die (Tools::displayError().' ('.Tools::safeOutput(get_class($this)).'->'.Tools::safeOutput($fieldArray).' '.Tools::displayError('Length').' '.Tools::safeOutput($size).' '.Tools::displayError('for language').')')
"]
node242[label="return $errorReturn ? get_class($this).'->'.$fieldArray.' '.Tools::displayError('Length').' '.$size.' '.Tools::displayError('for language') : false;
"]
node243[label="return $errorReturn ? Tools::displayError('The following field is invalid according to the validate method ').'<b>'.$method.'</b>:<br/> ('. get_class($this).'->'.$fieldArray.' = '.$value.' '.Tools::displayError('for language').' '.$k : false;
"]
node244[label=""]
node245[label=""]
node246[label=""]
node247[label=""]
node248[label=""]
node249[label="$association['setter'] = Tools::toCamelCase('set_ws_'.$assocName)
"]
node250[label=""]
node251[label="$association['getter'] = Tools::toCamelCase('get_ws_'.$assocName)
"]
node252[label=""]
node253[label="$resourceParameters = array_merge_recursive($defaultResourceParameters, $this->{$wsParamsAttributeName})
"]
node254[label="self::$fieldsRequiredDatabase[$row['object_name']][(int)$row['id_required_field']] = pSQL($row['field_name'])
"]
node255[label=""]
node256[label=""]
node257[label=""]
node258[label="$fields = $this->getTranslationsFieldsChild()
"]
node259[label="return $result;
"]
node260[label=""]
node261[label=""]
node262[label=""]
node263[label=""]
node264[label=""]
node265[label="die (Tools::displayError().' ('.Tools::safeOutput(get_class($this)).' -> '.Tools::safeOutput($field).' = '.Tools::safeOutput($this->{$field}).')')
"]
node266[label=""]
node267[label="die (Tools::displayError('The following field is invalid according to the validate method ').'<b>'.Tools::safeOutput($method).'</b>:<br/> ('.Tools::safeOutput(get_class($this)).'->'.Tools::safeOutput($fieldArray).' = '.Tools::safeOutput($value).' '.Tools::displayError('for language').' '.Tools::safeOutput($k).')')
"]
node268[label="$errors[] = '<b>'.self::displayFieldName($field, get_class($this), $htmlentities).'</b> '.Tools::displayError('is invalid.')
"]
node269[label=""]
node270[label=""]
node271[label=""]
node272[label=""]
node273[label=""]
node274[label=""]
node275[label=""]
node276[label=""]
node277[label="$this->{$key}[(int)$row['id_lang']] = $value
"]
node278[label=""]
node279[label=""]
node280[label=""]
node281[label=""]
node282[label="foreach ($fields as $field)
				{
					foreach (array_keys($field) as $key)
						if (!Validate::isTableOrIdentifier($key))
							die(Tools::displayError());

					// used to insert missing lang entries
					$where_lang = '`'.pSQL($this->identifier).'` = '.(int)($this->id).' AND `id_lang` = '.(int)($field['id_lang']);

					$lang_found = Db::getInstance()->getValue('SELECT COUNT(*) FROM `'.pSQL(_DB_PREFIX_.$this->table).'_lang` WHERE '. $where_lang);

					if (!$lang_found)
						$result &= Db::getInstance()->AutoExecute(_DB_PREFIX_.$this->table.'_lang', $field, 'INSERT');
					else
						$result &= Db::getInstance()->AutoExecute(_DB_PREFIX_.$this->table.'_lang', $field, 'UPDATE', $where_lang);
				}
"]
node283[label=""]
node284[label="$this->{$field} = $value
"]
node285[label=""]
node286[label="foreach ($this->fieldsSize as $fieldName => $maxSize)
			{
				if (!isset($resourceParameters['fields'][$fieldName]))
					$resourceParameters['fields'][$fieldName] = array('required' => false);
				$resourceParameters['fields'][$fieldName] = array_merge(
					$resourceParameters['fields'][$fieldName],
					$resourceParameters['fields'][$fieldName] = array('sqlId' => $fieldName, 'maxSize' => $maxSize, 'i18n' => false)
				);
			}
"]
node287[label=""]
node288[label="$this->{$key} = array()
"]
node289[label=""]
node290[label="foreach ($fields AS $field)
				{
					foreach (array_keys($field) AS $key)
					 	if (!Validate::isTableOrIdentifier($key))
			 				die(Tools::displayError('key is not table or identifier, ').Tools::safeOutput($key));
					$field[$this->identifier] = (int)$this->id;
					$result &= Db::getInstance()->AutoExecute(_DB_PREFIX_.$this->table.'_lang', $field, 'INSERT');
				}
"]
node291[label=""]
node292[label=""]
node293[label="$this->{$field} = Tools::encrypt($value)
"]
node294[label=""]
node295[label=""]
node296[label=""]
node297[label="$resourceParameters['fields'][$fieldName] = array_merge(
					$resourceParameters['fields'][$fieldName],
					$resourceParameters['fields'][$fieldName] = array('sqlId' => $fieldName, 'maxSize' => $maxSize, 'i18n' => false)
				)
"]
node298[label=""]
node299[label=""]
node300[label=""]
node301[label="$field[$this->identifier] = (int)$this->id
$result &= Db::getInstance()->AutoExecute(_DB_PREFIX_.$this->table.'_lang', $field, 'INSERT')
"]
node302[label="foreach (array_keys($field) as $key)
						if (!Validate::isTableOrIdentifier($key))
							die(Tools::displayError());
"]
node303[label="$result &= Db::getInstance()->AutoExecute(_DB_PREFIX_.$this->table.'_lang', $field, 'INSERT')
"]
node304[label="$result &= Db::getInstance()->AutoExecute(_DB_PREFIX_.$this->table.'_lang', $field, 'UPDATE', $where_lang)
"]
node305[label="$resourceParameters['fields'][$fieldName] = array('required' => false)
"]
node306[label=""]
node307[label="foreach ($this->fieldsValidate as $fieldName => $validateMethod)
			{
				if (!isset($resourceParameters['fields'][$fieldName]))
					$resourceParameters['fields'][$fieldName] = array('required' => false);
				$resourceParameters['fields'][$fieldName] = array_merge(
					$resourceParameters['fields'][$fieldName],
					$resourceParameters['fields'][$fieldName] = array(
						'sqlId' => $fieldName,
						'validateMethod' => (
								array_key_exists('validateMethod', $resourceParameters['fields'][$fieldName]) ?
								array_merge($resourceParameters['fields'][$fieldName]['validateMethod'], array($validateMethod)) :
								array($validateMethod)
							),
						'i18n' => false
					)
				);
			}
"]
node308[label=""]
node309[label="foreach (array_keys($field) AS $key)
					 	if (!Validate::isTableOrIdentifier($key))
			 				die(Tools::displayError('key is not table or identifier, ').Tools::safeOutput($key));
"]
node310[label=""]
node311[label="$where_lang = '`'.pSQL($this->identifier).'` = '.(int)($this->id).' AND `id_lang` = '.(int)($field['id_lang'])
$lang_found = Db::getInstance()->getValue('SELECT COUNT(*) FROM `'.pSQL(_DB_PREFIX_.$this->table).'_lang` WHERE '. $where_lang)
"]
node312[label=""]
node313[label=""]
node314[label=""]
node315[label="$resourceParameters['fields'][$fieldName] = array_merge(
					$resourceParameters['fields'][$fieldName],
					$resourceParameters['fields'][$fieldName] = array(
						'sqlId' => $fieldName,
						'validateMethod' => (
								array_key_exists('validateMethod', $resourceParameters['fields'][$fieldName]) ?
								array_merge($resourceParameters['fields'][$fieldName]['validateMethod'], array($validateMethod)) :
								array($validateMethod)
							),
						'i18n' => false
					)
				)
"]
node316[label="$fieldsRequired = array_merge($this->fieldsRequired, (isset(self::$fieldsRequiredDatabase[get_class($this)]) ? self::$fieldsRequiredDatabase[get_class($this)] : array()))
"]
node317[label=""]
node318[label=""]
node319[label=""]
node320[label="die(Tools::displayError())
"]
node321[label=""]
node322[label="$resourceParameters['fields'][$fieldName] = array('required' => false)
"]
node323[label=""]
node324[label="foreach ($fieldsRequired as $fieldRequired)
			{
				if (!isset($resourceParameters['fields'][$fieldRequired]))
					$resourceParameters['fields'][$fieldRequired] = array();
				$resourceParameters['fields'][$fieldRequired] = array_merge(
					$resourceParameters['fields'][$fieldRequired],
					$resourceParameters['fields'][$fieldRequired] = array('sqlId' => $fieldRequired, 'required' => true, 'i18n' => false)
				);
			}
"]
node325[label=""]
node326[label="die(Tools::displayError('key is not table or identifier, ').Tools::safeOutput($key))
"]
node327[label=""]
node328[label=""]
node329[label=""]
node330[label="$resourceParameters['fields'][$fieldRequired] = array_merge(
					$resourceParameters['fields'][$fieldRequired],
					$resourceParameters['fields'][$fieldRequired] = array('sqlId' => $fieldRequired, 'required' => true, 'i18n' => false)
				)
"]
node331[label=""]
node332[label=""]
node333[label="$resourceParameters['fields'][$fieldRequired] = array()
"]
node334[label=""]
node335[label="foreach ($this->fieldsSizeLang as $fieldName => $maxSize)
			{
				if (!isset($resourceParameters['fields'][$fieldName]))
					$resourceParameters['fields'][$fieldName] = array('required' => false);
				$resourceParameters['fields'][$fieldName] = array_merge(
					$resourceParameters['fields'][$fieldName],
					$resourceParameters['fields'][$fieldName] = array('sqlId' => $fieldName, 'maxSize' => $maxSize, 'i18n' => true)
				);
			}
"]
node336[label=""]
node337[label=""]
node338[label=""]
node339[label="$resourceParameters['fields'][$fieldName] = array_merge(
					$resourceParameters['fields'][$fieldName],
					$resourceParameters['fields'][$fieldName] = array('sqlId' => $fieldName, 'maxSize' => $maxSize, 'i18n' => true)
				)
"]
node340[label=""]
node341[label=""]
node342[label="$resourceParameters['fields'][$fieldName] = array('required' => false)
"]
node343[label=""]
node344[label="foreach ($this->fieldsValidateLang as $fieldName => $validateMethod)
			{
				if (!isset($resourceParameters['fields'][$fieldName]))
					$resourceParameters['fields'][$fieldName] = array('required' => false);
				$resourceParameters['fields'][$fieldName] = array_merge(
					$resourceParameters['fields'][$fieldName],
					$resourceParameters['fields'][$fieldName] = array(
						'sqlId' => $fieldName,
						'validateMethod' => (
								array_key_exists('validateMethod', $resourceParameters['fields'][$fieldName]) ?
								array_merge($resourceParameters['fields'][$fieldName]['validateMethod'], array($validateMethod)) :
								array($validateMethod)
							),
						'i18n' => true
					)
				);
			}
"]
node345[label=""]
node346[label=""]
node347[label=""]
node348[label="$resourceParameters['fields'][$fieldName] = array_merge(
					$resourceParameters['fields'][$fieldName],
					$resourceParameters['fields'][$fieldName] = array(
						'sqlId' => $fieldName,
						'validateMethod' => (
								array_key_exists('validateMethod', $resourceParameters['fields'][$fieldName]) ?
								array_merge($resourceParameters['fields'][$fieldName]['validateMethod'], array($validateMethod)) :
								array($validateMethod)
							),
						'i18n' => true
					)
				)
"]
node349[label=""]
node350[label=""]
node351[label="$resourceParameters['fields'][$fieldName] = array('required' => false)
"]
node352[label=""]
node353[label="foreach ($this->fieldsRequiredLang as $field)
			{
				if (!isset($resourceParameters['fields'][$field]))
					$resourceParameters['fields'][$field] = array();
				$resourceParameters['fields'][$field] = array_merge(
					$resourceParameters['fields'][$field],
					$resourceParameters['fields'][$field] = array('sqlId' => $field, 'required' => true, 'i18n' => true)
				);
			}
"]
node354[label=""]
node355[label=""]
node356[label=""]
node357[label="$resourceParameters['fields'][$field] = array_merge(
					$resourceParameters['fields'][$field],
					$resourceParameters['fields'][$field] = array('sqlId' => $field, 'required' => true, 'i18n' => true)
				)
"]
node358[label="$resourceParameters['fields']['date_add']['setter'] = false
"]
node359[label=""]
node360[label="$resourceParameters['fields'][$field] = array()
"]
node361[label=""]
node362[label=""]
node363[label="$resourceParameters['fields']['date_upd']['setter'] = false
"]
node364[label=""]
node365[label=""]
node366[label="foreach ($resourceParameters['fields'] as $key => &$resourceParametersField)
			if (!isset($resourceParametersField['sqlId']))
				$resourceParametersField['sqlId'] = $key;
"]
node367[label=""]
node368[label="return $resourceParameters;
"]
node369[label=""]
node370[label="$resourceParametersField['sqlId'] = $key
"]
node371[label=""]
node372[label=""]
node373[label=""]
node0 -> node24[headport=n, tailport=s,label="   "]
node1 -> node25[headport=n, tailport=s,label="   "]
node2 -> node26[headport=n, tailport=s,label="$id_lang != NULL && Validate::isLoadedObject(new Language($id_lang))"]
node2 -> node27[headport=n, tailport=s,label=" else  "]
node3 -> node28[headport=n, tailport=s,label="   "]
node4 -> node29[headport=n, tailport=s,label="!Validate::isTableOrIdentifier($this->table)"]
node4 -> node30[headport=n, tailport=s,label=" else  "]
node5 -> node31[headport=n, tailport=s,label="!Validate::isTableOrIdentifier($this->identifier) OR !Validate::isTableOrIdentifier($this->table)"]
node5 -> node32[headport=n, tailport=s,label=" else  "]
node6 -> node33[headport=n, tailport=s,label="!Validate::isTableOrIdentifier($this->identifier) OR !Validate::isTableOrIdentifier($this->table)"]
node6 -> node34[headport=n, tailport=s,label=" else  "]
node7 -> node35[headport=n, tailport=s,label="!is_array($selection) OR !Validate::isTableOrIdentifier($this->identifier) OR !Validate::isTableOrIdentifier($this->table)"]
node7 -> node36[headport=n, tailport=s,label=" else  "]
node8 -> node37[headport=n, tailport=s,label="!Validate::isTableOrIdentifier($this->identifier) OR !Validate::isTableOrIdentifier($this->table)"]
node8 -> node38[headport=n, tailport=s,label=" else  "]
node9 -> node39[headport=n, tailport=s,label="!Validate::isTableOrIdentifier($this->identifier)"]
node9 -> node40[headport=n, tailport=s,label=" else  "]
node10 -> node41[headport=n, tailport=s,label="   "]
node11 -> node42[headport=n, tailport=s,label="   "]
node12 -> node43[headport=n, tailport=s,label="   "]
node13 -> node44[headport=n, tailport=s,label="   "]
node14 -> node45[headport=n, tailport=s,label="   "]
node15 -> node46[headport=n, tailport=s,label="   "]
node16 -> node47[headport=n, tailport=s,label="is_null($wsParamsAttributeName)"]
node16 -> node48[headport=n, tailport=s,label=" else  "]
node17 -> node49[headport=n, tailport=s,label="   "]
node18 -> node50[headport=n, tailport=s,label="   "]
node19 -> node51[headport=n, tailport=s,label="!is_array($fields)"]
node19 -> node52[headport=n, tailport=s,label=" else  "]
node20 -> node53[headport=n, tailport=s,label="$all AND isset(self::$_cache[$this->table])"]
node20 -> node54[headport=n, tailport=s,label=" else  "]
node21 -> node55[headport=n, tailport=s,label="!$this->id"]
node21 -> node56[headport=n, tailport=s,label=" else  "]
node22 -> node57[headport=n, tailport=s,label="$table == 'orders'"]
node22 -> node58[headport=n, tailport=s,label=" else  "]
node23 -> node59[headport=n, tailport=s,label="   "]
node26 -> node62[headport=n, tailport=s,label="   "]
node27 -> node63[headport=n, tailport=s,label="$id_lang != NULL"]
node27 -> node62[headport=n, tailport=s,label=" else  "]
node29 -> node30[headport=n, tailport=s,label="   "]
node30 -> node65[headport=n, tailport=s,label="$autodate AND key_exists('date_add', $this)"]
node30 -> node66[headport=n, tailport=s,label=" else  "]
node31 -> node32[headport=n, tailport=s,label="   "]
node32 -> node67[headport=n, tailport=s,label="key_exists('date_upd', $this)"]
node32 -> node68[headport=n, tailport=s,label=" else  "]
node33 -> node34[headport=n, tailport=s,label="   "]
node34 -> node69[headport=n, tailport=s,label="!$result"]
node34 -> node70[headport=n, tailport=s,label=" else  "]
node35 -> node36[headport=n, tailport=s,label="   "]
node36 -> node71[headport=n, tailport=s,label="   "]
node37 -> node72[headport=n, tailport=s,label="   "]
node38 -> node73[headport=n, tailport=s,label="!key_exists('active', $this)"]
node38 -> node72[headport=n, tailport=s,label=" else  "]
node39 -> node40[headport=n, tailport=s,label="   "]
node40 -> node74[headport=n, tailport=s,label="$this->id_lang == NULL"]
node40 -> node75[headport=n, tailport=s,label=" else  "]
node41 -> node76[headport=n, tailport=s,label="$field"]
node41 -> node77[headport=n, tailport=s,label=" else  "]
node42 -> node81[headport=n, tailport=s,label="$field"]
node42 -> node82[headport=n, tailport=s,label=" else  "]
node43 -> node84[headport=n, tailport=s,label="$fieldArray"]
node43 -> node85[headport=n, tailport=s,label=" else  "]
node46 -> node90[headport=n, tailport=s,label="$field"]
node46 -> node91[headport=n, tailport=s,label=" else  "]
node47 -> node48[headport=n, tailport=s,label="   "]
node48 -> node94[headport=n, tailport=s,label="!isset($this->{$wsParamsAttributeName}['objectNodeName'])"]
node48 -> node95[headport=n, tailport=s,label=" else  "]
node51 -> node98[headport=n, tailport=s,label="   "]
node52 -> node99[headport=n, tailport=s,label="!Db::getInstance()->Execute('DELETE FROM '._DB_PREFIX_.'required_field WHERE object_name = \''.pSQL(get_class($this)).'\'')"]
node52 -> node100[headport=n, tailport=s,label=" else  "]
node53 -> node102[headport=n, tailport=s,label="   "]
node54 -> node103[headport=n, tailport=s,label="$this->id AND isset(self::$_cache[$this->table][(int)$this->id])"]
node54 -> node102[headport=n, tailport=s,label=" else  "]
node55 -> node104[headport=n, tailport=s,label="   "]
node56 -> node105[headport=n, tailport=s,label="image_dir"]
node56 -> node106[headport=n, tailport=s,label=" else  "]
node57 -> node108[headport=n, tailport=s,label="   "]
node58 -> node108[headport=n, tailport=s,label="   "]
node60 -> node24[headport=n, tailport=s,label="   "]
node61 -> node25[headport=n, tailport=s,label="   "]
node62 -> node109[headport=n, tailport=s,label="!Validate::isTableOrIdentifier($this->identifier) OR !Validate::isTableOrIdentifier($this->table)"]
node62 -> node110[headport=n, tailport=s,label=" else  "]
node63 -> node62[headport=n, tailport=s,label="   "]
node64 -> node28[headport=n, tailport=s,label="   "]
node65 -> node66[headport=n, tailport=s,label="   "]
node66 -> node111[headport=n, tailport=s,label="$autodate AND key_exists('date_upd', $this)"]
node66 -> node112[headport=n, tailport=s,label=" else  "]
node67 -> node68[headport=n, tailport=s,label="   "]
node68 -> node113[headport=n, tailport=s,label="$nullValues"]
node68 -> node114[headport=n, tailport=s,label=" else  "]
node69 -> node115[headport=n, tailport=s,label="   "]
node70 -> node116[headport=n, tailport=s,label="method_exists($this, 'getTranslationsFieldsChild')"]
node70 -> node117[headport=n, tailport=s,label=" else  "]
node71 -> node119[headport=n, tailport=s,label="$id"]
node71 -> node120[headport=n, tailport=s,label=" else  "]
node72 -> node121[headport=n, tailport=s,label="   "]
node73 -> node72[headport=n, tailport=s,label="   "]
node74 -> node122[headport=n, tailport=s,label="$language"]
node74 -> node123[headport=n, tailport=s,label=" else  "]
node75 -> node123[headport=n, tailport=s,label="   "]
node76 -> node124[headport=n, tailport=s,label="!Validate::isTableOrIdentifier($field)"]
node76 -> node125[headport=n, tailport=s,label=" else  "]
node78 -> node41[headport=n, tailport=s,label="   "]
node79 -> node41[headport=n, tailport=s,label="   "]
node80 -> node41[headport=n, tailport=s,label="   "]
node81 -> node127[headport=n, tailport=s,label="Tools::isEmpty($this->{$field}) AND (!is_numeric($this->{$field}))"]
node81 -> node42[headport=n, tailport=s,label=" else  "]
node82 -> node128[headport=n, tailport=s,label="$size"]
node82 -> node129[headport=n, tailport=s,label=" else  "]
node83 -> node42[headport=n, tailport=s,label="   "]
node84 -> node131[headport=n, tailport=s,label="!is_array($this->{$fieldArray})"]
node84 -> node87[headport=n, tailport=s,label=" else  "]
node85 -> node132[headport=n, tailport=s,label="$size"]
node85 -> node133[headport=n, tailport=s,label=" else  "]
node86 -> node43[headport=n, tailport=s,label="   "]
node87 -> node135[headport=n, tailport=s,label="!$this->{$fieldArray} OR !sizeof($this->{$fieldArray}) OR ($this->{$fieldArray}[$defaultLanguage] !== '0' AND empty($this->{$fieldArray}[$defaultLanguage]))"]
node87 -> node43[headport=n, tailport=s,label=" else  "]
node88 -> node44[headport=n, tailport=s,label="   "]
node89 -> node45[headport=n, tailport=s,label="   "]
node90 -> node93[headport=n, tailport=s,label="($value = Tools::getValue($field, $this->{$field})) == false AND (string)$value != '0'"]
node90 -> node46[headport=n, tailport=s,label=" else  "]
node91 -> node137[headport=n, tailport=s,label="$maxLength"]
node91 -> node138[headport=n, tailport=s,label=" else  "]
node92 -> node46[headport=n, tailport=s,label="   "]
node93 -> node92[headport=n, tailport=s,label="!$this->id OR $field != 'passwd'"]
node93 -> node46[headport=n, tailport=s,label=" else  "]
node94 -> node95[headport=n, tailport=s,label="   "]
node95 -> node140[headport=n, tailport=s,label="!isset($this->{$wsParamsAttributeName}['objectsNodeName'])"]
node95 -> node141[headport=n, tailport=s,label=" else  "]
node96 -> node49[headport=n, tailport=s,label="   "]
node97 -> node50[headport=n, tailport=s,label="   "]
node99 -> node98[headport=n, tailport=s,label="   "]
node100 -> node145[headport=n, tailport=s,label="$field"]
node100 -> node143[headport=n, tailport=s,label=" else  "]
node101 -> node52[headport=n, tailport=s,label="   "]
node103 -> node102[headport=n, tailport=s,label="   "]
node105 -> node148[headport=n, tailport=s,label="file_exists($this->image_dir.$this->id.'.'.$this->image_format) 
				&& !unlink($this->image_dir.$this->id.'.'.$this->image_format)"]
node105 -> node106[headport=n, tailport=s,label=" else  "]
node106 -> node149[headport=n, tailport=s,label="file_exists(_PS_TMP_IMG_DIR_.$this->table.'_'.$this->id.'.'.$this->image_format) 
			&& !unlink(_PS_TMP_IMG_DIR_.$this->table.'_'.$this->id.'.'.$this->image_format)"]
node106 -> node154[headport=n, tailport=s,label=" else  "]
node107 -> node56[headport=n, tailport=s,label="   "]
node108 -> node156[headport=n, tailport=s,label="   "]
node109 -> node110[headport=n, tailport=s,label="   "]
node110 -> node157[headport=n, tailport=s,label="$id"]
node110 -> node158[headport=n, tailport=s,label=" else  "]
node111 -> node112[headport=n, tailport=s,label="   "]
node112 -> node159[headport=n, tailport=s,label="$nullValues"]
node112 -> node160[headport=n, tailport=s,label=" else  "]
node113 -> node161[headport=n, tailport=s,label="   "]
node114 -> node161[headport=n, tailport=s,label="   "]
node116 -> node117[headport=n, tailport=s,label="   "]
node117 -> node115[headport=n, tailport=s,label="   "]
node118 -> node70[headport=n, tailport=s,label="   "]
node119 -> node71[headport=n, tailport=s,label="   "]
node120 -> node163[headport=n, tailport=s,label="   "]
node122 -> node74[headport=n, tailport=s,label="   "]
node123 -> node165[headport=n, tailport=s,label="   "]
node124 -> node125[headport=n, tailport=s,label="   "]
node125 -> node78[headport=n, tailport=s,label="(!$this->id_lang AND isset($this->{$field}[$id_language]) AND !empty($this->{$field}[$id_language])) 
			OR ($this->id_lang AND isset($this->$field) AND !empty($this->$field))"]
node125 -> node126[headport=n, tailport=s,label=" else  "]
node126 -> node79[headport=n, tailport=s,label="in_array($field, $this->fieldsRequiredLang)"]
node126 -> node80[headport=n, tailport=s,label=" else  "]
node127 -> node166[headport=n, tailport=s,label="$die"]
node127 -> node167[headport=n, tailport=s,label=" else  "]
node128 -> node168[headport=n, tailport=s,label="isset($this->{$field}) AND Tools::strlen($this->{$field}) > $size"]
node128 -> node82[headport=n, tailport=s,label=" else  "]
node129 -> node169[headport=n, tailport=s,label="   "]
node130 -> node82[headport=n, tailport=s,label="   "]
node131 -> node170[headport=n, tailport=s,label="$value"]
node131 -> node171[headport=n, tailport=s,label=" else  "]
node132 -> node131[headport=n, tailport=s,label="!is_array($this->{$fieldArray})"]
node132 -> node134[headport=n, tailport=s,label=" else  "]
node133 -> node175[headport=n, tailport=s,label="   "]
node134 -> node176[headport=n, tailport=s,label="$value"]
node134 -> node85[headport=n, tailport=s,label=" else  "]
node135 -> node179[headport=n, tailport=s,label="$die"]
node135 -> node180[headport=n, tailport=s,label=" else  "]
node136 -> node87[headport=n, tailport=s,label="   "]
node137 -> node181[headport=n, tailport=s,label="($value = Tools::getValue($field, $this->{$field})) AND Tools::strlen($value) > $maxLength"]
node137 -> node182[headport=n, tailport=s,label=" else  "]
node138 -> node183[headport=n, tailport=s,label="   "]
node139 -> node91[headport=n, tailport=s,label="   "]
node140 -> node141[headport=n, tailport=s,label="   "]
node141 -> node184[headport=n, tailport=s,label="isset($this->{$wsParamsAttributeName}['associations'])"]
node141 -> node185[headport=n, tailport=s,label=" else  "]
node142 -> node98[headport=n, tailport=s,label="   "]
node143 -> node98[headport=n, tailport=s,label="   "]
node144 -> node98[headport=n, tailport=s,label="   "]
node145 -> node142[headport=n, tailport=s,label="!Db::getInstance()->AutoExecute(_DB_PREFIX_.'required_field', array('object_name' => pSQL(get_class($this)), 'field_name' => pSQL($field)), 'INSERT')"]
node145 -> node100[headport=n, tailport=s,label=" else  "]
node146 -> node100[headport=n, tailport=s,label="   "]
node147 -> node100[headport=n, tailport=s,label="   "]
node148 -> node104[headport=n, tailport=s,label="   "]
node149 -> node104[headport=n, tailport=s,label="   "]
node150 -> node104[headport=n, tailport=s,label="   "]
node151 -> node104[headport=n, tailport=s,label="   "]
node152 -> node104[headport=n, tailport=s,label="   "]
node153 -> node104[headport=n, tailport=s,label="   "]
node154 -> node150[headport=n, tailport=s,label="file_exists(_PS_TMP_IMG_DIR_.$this->table.'_mini_'.$this->id.'.'.$this->image_format) 
			&& !unlink(_PS_TMP_IMG_DIR_.$this->table.'_mini_'.$this->id.'.'.$this->image_format)"]
node154 -> node188[headport=n, tailport=s,label=" else  "]
node155 -> node106[headport=n, tailport=s,label="   "]
node157 -> node191[headport=n, tailport=s,label="!isset(self::$_cache[$this->table][(int)($id)][(int)($id_lang)])"]
node157 -> node192[headport=n, tailport=s,label=" else  "]
node158 -> node193[headport=n, tailport=s,label="!is_array(self::$fieldsRequiredDatabase)"]
node158 -> node194[headport=n, tailport=s,label=" else  "]
node159 -> node197[headport=n, tailport=s,label="   "]
node160 -> node197[headport=n, tailport=s,label="   "]
node161 -> node198[headport=n, tailport=s,label="!$result"]
node161 -> node199[headport=n, tailport=s,label=" else  "]
node162 -> node115[headport=n, tailport=s,label="   "]
node164 -> node121[headport=n, tailport=s,label="   "]
node166 -> node167[headport=n, tailport=s,label="   "]
node167 -> node202[headport=n, tailport=s,label="   "]
node168 -> node203[headport=n, tailport=s,label="$die"]
node168 -> node204[headport=n, tailport=s,label=" else  "]
node169 -> node205[headport=n, tailport=s,label="$method"]
node169 -> node206[headport=n, tailport=s,label=" else  "]
node170 -> node173[headport=n, tailport=s,label="key_exists($key, $this)"]
node170 -> node131[headport=n, tailport=s,label=" else  "]
node171 -> node195[headport=n, tailport=s,label="!$id_lang AND method_exists($this, 'getTranslationsFieldsChild')"]
node171 -> node158[headport=n, tailport=s,label=" else  "]
node172 -> node131[headport=n, tailport=s,label="   "]
node173 -> node131[headport=n, tailport=s,label="   "]
node174 -> node131[headport=n, tailport=s,label="!is_array($this->{$fieldArray})"]
node174 -> node210[headport=n, tailport=s,label=" else  "]
node175 -> node174[headport=n, tailport=s,label="$method"]
node175 -> node211[headport=n, tailport=s,label=" else  "]
node176 -> node212[headport=n, tailport=s,label="Tools::strlen($value) > $size"]
node176 -> node134[headport=n, tailport=s,label=" else  "]
node177 -> node134[headport=n, tailport=s,label="   "]
node178 -> node134[headport=n, tailport=s,label="   "]
node179 -> node180[headport=n, tailport=s,label="   "]
node180 -> node213[headport=n, tailport=s,label="   "]
node181 -> node139[headport=n, tailport=s,label="   "]
node182 -> node139[headport=n, tailport=s,label="   "]
node183 -> node214[headport=n, tailport=s,label="$function"]
node183 -> node215[headport=n, tailport=s,label=" else  "]
node184 -> node217[headport=n, tailport=s,label="$association"]
node184 -> node218[headport=n, tailport=s,label=" else  "]
node185 -> node220[headport=n, tailport=s,label="isset($this->{$wsParamsAttributeName}['retrieveData']) && isset($this->{$wsParamsAttributeName}['retrieveData']['retrieveMethod'])"]
node185 -> node221[headport=n, tailport=s,label=" else  "]
node186 -> node151[headport=n, tailport=s,label="file_exists($this->image_dir.$this->id.'-'.stripslashes($image_type['name']).'.'.$this->image_format) 
			&& !unlink($this->image_dir.$this->id.'-'.stripslashes($image_type['name']).'.'.$this->image_format)"]
node186 -> node187[headport=n, tailport=s,label=" else  "]
node187 -> node186[headport=n, tailport=s,label="$image_type"]
node187 -> node152[headport=n, tailport=s,label=" else  "]
node188 -> node187[headport=n, tailport=s,label="   "]
node189 -> node154[headport=n, tailport=s,label="   "]
node190 -> node156[headport=n, tailport=s,label="   "]
node191 -> node192[headport=n, tailport=s,label="   "]
node192 -> node172[headport=n, tailport=s,label="$result"]
node192 -> node158[headport=n, tailport=s,label=" else  "]
node193 -> node224[headport=n, tailport=s,label="$fields"]
node193 -> node225[headport=n, tailport=s,label=" else  "]
node195 -> node196[headport=n, tailport=s,label="$result"]
node195 -> node158[headport=n, tailport=s,label=" else  "]
node196 -> node226[headport=n, tailport=s,label="$row"]
node196 -> node158[headport=n, tailport=s,label=" else  "]
node197 -> node227[headport=n, tailport=s,label="!$result"]
node197 -> node228[headport=n, tailport=s,label=" else  "]
node198 -> node229[headport=n, tailport=s,label="   "]
node199 -> node230[headport=n, tailport=s,label="method_exists($this, 'getTranslationsFieldsChild')"]
node199 -> node231[headport=n, tailport=s,label=" else  "]
node200 -> node163[headport=n, tailport=s,label="   "]
node201 -> node165[headport=n, tailport=s,label="   "]
node203 -> node204[headport=n, tailport=s,label="   "]
node204 -> node202[headport=n, tailport=s,label="   "]
node205 -> node207[headport=n, tailport=s,label="!method_exists($validate, $method)"]
node205 -> node209[headport=n, tailport=s,label=" else  "]
node206 -> node202[headport=n, tailport=s,label="   "]
node207 -> node169[headport=n, tailport=s,label="   "]
node208 -> node169[headport=n, tailport=s,label="   "]
node209 -> node235[headport=n, tailport=s,label="!empty($this->{$field}) AND !call_user_func(array('Validate', $method), $this->{$field})"]
node209 -> node169[headport=n, tailport=s,label=" else  "]
node210 -> node236[headport=n, tailport=s,label="$value"]
node210 -> node175[headport=n, tailport=s,label=" else  "]
node211 -> node213[headport=n, tailport=s,label="   "]
node212 -> node241[headport=n, tailport=s,label="$die"]
node212 -> node242[headport=n, tailport=s,label=" else  "]
node214 -> node245[headport=n, tailport=s,label="$value = Tools::getValue($field, $this->{$field}) OR ($field == 'postcode' AND $value == '0')"]
node214 -> node246[headport=n, tailport=s,label=" else  "]
node215 -> node247[headport=n, tailport=s,label="   "]
node216 -> node183[headport=n, tailport=s,label="   "]
node217 -> node249[headport=n, tailport=s,label="!array_key_exists('setter', $association) || (isset($association['setter']) && !$association['setter'])"]
node217 -> node250[headport=n, tailport=s,label=" else  "]
node218 -> node185[headport=n, tailport=s,label="   "]
node219 -> node184[headport=n, tailport=s,label="   "]
node220 -> node253[headport=n, tailport=s,label="   "]
node221 -> node253[headport=n, tailport=s,label="   "]
node222 -> node187[headport=n, tailport=s,label="   "]
node223 -> node188[headport=n, tailport=s,label="   "]
node224 -> node254[headport=n, tailport=s,label="$row"]
node224 -> node194[headport=n, tailport=s,label=" else  "]
node225 -> node194[headport=n, tailport=s,label="   "]
node226 -> node255[headport=n, tailport=s,label="$value"]
node226 -> node196[headport=n, tailport=s,label=" else  "]
node227 -> node257[headport=n, tailport=s,label="   "]
node228 -> node258[headport=n, tailport=s,label="method_exists($this, 'getTranslationsFieldsChild')"]
node228 -> node259[headport=n, tailport=s,label=" else  "]
node230 -> node262[headport=n, tailport=s,label="is_array($fields)"]
node230 -> node263[headport=n, tailport=s,label=" else  "]
node231 -> node229[headport=n, tailport=s,label="   "]
node232 -> node199[headport=n, tailport=s,label="   "]
node233 -> node202[headport=n, tailport=s,label="   "]
node234 -> node202[headport=n, tailport=s,label="   "]
node235 -> node265[headport=n, tailport=s,label="$die"]
node235 -> node233[headport=n, tailport=s,label=" else  "]
node236 -> node238[headport=n, tailport=s,label="!method_exists($validate, $method)"]
node236 -> node240[headport=n, tailport=s,label=" else  "]
node237 -> node210[headport=n, tailport=s,label="   "]
node238 -> node210[headport=n, tailport=s,label="   "]
node239 -> node210[headport=n, tailport=s,label="   "]
node240 -> node266[headport=n, tailport=s,label="!empty($value) AND !call_user_func(array('Validate', $method), $value)"]
node240 -> node210[headport=n, tailport=s,label=" else  "]
node241 -> node242[headport=n, tailport=s,label="   "]
node242 -> node213[headport=n, tailport=s,label="   "]
node243 -> node213[headport=n, tailport=s,label="   "]
node244 -> node213[headport=n, tailport=s,label="   "]
node245 -> node268[headport=n, tailport=s,label="!Validate::$function($value)"]
node245 -> node269[headport=n, tailport=s,label=" else  "]
node246 -> node216[headport=n, tailport=s,label="   "]
node248 -> node216[headport=n, tailport=s,label="   "]
node249 -> node272[headport=n, tailport=s,label="   "]
node250 -> node272[headport=n, tailport=s,label="   "]
node251 -> node219[headport=n, tailport=s,label="   "]
node252 -> node219[headport=n, tailport=s,label="   "]
node253 -> node273[headport=n, tailport=s,label="isset($this->fieldsSize)"]
node253 -> node274[headport=n, tailport=s,label=" else  "]
node254 -> node224[headport=n, tailport=s,label="   "]
node255 -> node275[headport=n, tailport=s,label="key_exists($key, $this) AND $key != $this->identifier"]
node255 -> node276[headport=n, tailport=s,label=" else  "]
node256 -> node226[headport=n, tailport=s,label="   "]
node258 -> node279[headport=n, tailport=s,label="$fields AND is_array($fields)"]
node258 -> node280[headport=n, tailport=s,label=" else  "]
node259 -> node257[headport=n, tailport=s,label="   "]
node260 -> node228[headport=n, tailport=s,label="   "]
node261 -> node229[headport=n, tailport=s,label="   "]
node262 -> node282[headport=n, tailport=s,label="   "]
node263 -> node231[headport=n, tailport=s,label="   "]
node264 -> node231[headport=n, tailport=s,label="   "]
node265 -> node233[headport=n, tailport=s,label="   "]
node266 -> node267[headport=n, tailport=s,label="$die"]
node266 -> node243[headport=n, tailport=s,label=" else  "]
node267 -> node243[headport=n, tailport=s,label="   "]
node268 -> node248[headport=n, tailport=s,label="   "]
node269 -> node283[headport=n, tailport=s,label="$field == 'passwd'"]
node269 -> node284[headport=n, tailport=s,label=" else  "]
node270 -> node247[headport=n, tailport=s,label="   "]
node271 -> node248[headport=n, tailport=s,label="   "]
node272 -> node251[headport=n, tailport=s,label="!array_key_exists('getter', $association)"]
node272 -> node252[headport=n, tailport=s,label=" else  "]
node273 -> node286[headport=n, tailport=s,label="   "]
node274 -> node287[headport=n, tailport=s,label="   "]
node275 -> node288[headport=n, tailport=s,label="!is_array($this->{$key})"]
node275 -> node289[headport=n, tailport=s,label=" else  "]
node276 -> node256[headport=n, tailport=s,label="   "]
node277 -> node256[headport=n, tailport=s,label="   "]
node278 -> node257[headport=n, tailport=s,label="   "]
node279 -> node290[headport=n, tailport=s,label="   "]
node280 -> node259[headport=n, tailport=s,label="   "]
node281 -> node259[headport=n, tailport=s,label="   "]
node282 -> node291[headport=n, tailport=s,label="$field"]
node282 -> node264[headport=n, tailport=s,label=" else  "]
node283 -> node293[headport=n, tailport=s,label="$value = Tools::getValue($field)"]
node283 -> node294[headport=n, tailport=s,label=" else  "]
node284 -> node271[headport=n, tailport=s,label="   "]
node285 -> node271[headport=n, tailport=s,label="   "]
node286 -> node295[headport=n, tailport=s,label="$maxSize"]
node286 -> node296[headport=n, tailport=s,label=" else  "]
node287 -> node298[headport=n, tailport=s,label="isset($this->fieldsValidate)"]
node287 -> node299[headport=n, tailport=s,label=" else  "]
node288 -> node277[headport=n, tailport=s,label="   "]
node289 -> node277[headport=n, tailport=s,label="   "]
node290 -> node300[headport=n, tailport=s,label="$field"]
node290 -> node281[headport=n, tailport=s,label=" else  "]
node291 -> node302[headport=n, tailport=s,label="   "]
node292 -> node282[headport=n, tailport=s,label="   "]
node293 -> node285[headport=n, tailport=s,label="   "]
node294 -> node285[headport=n, tailport=s,label="   "]
node295 -> node305[headport=n, tailport=s,label="!isset($resourceParameters['fields'][$fieldName])"]
node295 -> node306[headport=n, tailport=s,label=" else  "]
node296 -> node287[headport=n, tailport=s,label="   "]
node297 -> node286[headport=n, tailport=s,label="   "]
node298 -> node307[headport=n, tailport=s,label="   "]
node299 -> node308[headport=n, tailport=s,label="   "]
node300 -> node309[headport=n, tailport=s,label="   "]
node301 -> node290[headport=n, tailport=s,label="   "]
node302 -> node310[headport=n, tailport=s,label="$key"]
node302 -> node311[headport=n, tailport=s,label=" else  "]
node303 -> node292[headport=n, tailport=s,label="   "]
node304 -> node292[headport=n, tailport=s,label="   "]
node305 -> node297[headport=n, tailport=s,label="   "]
node306 -> node297[headport=n, tailport=s,label="   "]
node307 -> node313[headport=n, tailport=s,label="$validateMethod"]
node307 -> node314[headport=n, tailport=s,label=" else  "]
node308 -> node316[headport=n, tailport=s,label="isset($this->fieldsRequired)"]
node308 -> node317[headport=n, tailport=s,label=" else  "]
node309 -> node318[headport=n, tailport=s,label="$key"]
node309 -> node301[headport=n, tailport=s,label=" else  "]
node310 -> node320[headport=n, tailport=s,label="!Validate::isTableOrIdentifier($key)"]
node310 -> node321[headport=n, tailport=s,label=" else  "]
node311 -> node303[headport=n, tailport=s,label="!$lang_found"]
node311 -> node304[headport=n, tailport=s,label=" else  "]
node312 -> node302[headport=n, tailport=s,label="   "]
node313 -> node322[headport=n, tailport=s,label="!isset($resourceParameters['fields'][$fieldName])"]
node313 -> node323[headport=n, tailport=s,label=" else  "]
node314 -> node308[headport=n, tailport=s,label="   "]
node315 -> node307[headport=n, tailport=s,label="   "]
node316 -> node324[headport=n, tailport=s,label="   "]
node317 -> node325[headport=n, tailport=s,label="   "]
node318 -> node326[headport=n, tailport=s,label="!Validate::isTableOrIdentifier($key)"]
node318 -> node327[headport=n, tailport=s,label=" else  "]
node319 -> node309[headport=n, tailport=s,label="   "]
node320 -> node312[headport=n, tailport=s,label="   "]
node321 -> node312[headport=n, tailport=s,label="   "]
node322 -> node315[headport=n, tailport=s,label="   "]
node323 -> node315[headport=n, tailport=s,label="   "]
node324 -> node328[headport=n, tailport=s,label="$fieldRequired"]
node324 -> node329[headport=n, tailport=s,label=" else  "]
node325 -> node331[headport=n, tailport=s,label="isset($this->fieldsSizeLang)"]
node325 -> node332[headport=n, tailport=s,label=" else  "]
node326 -> node319[headport=n, tailport=s,label="   "]
node327 -> node319[headport=n, tailport=s,label="   "]
node328 -> node333[headport=n, tailport=s,label="!isset($resourceParameters['fields'][$fieldRequired])"]
node328 -> node334[headport=n, tailport=s,label=" else  "]
node329 -> node325[headport=n, tailport=s,label="   "]
node330 -> node324[headport=n, tailport=s,label="   "]
node331 -> node335[headport=n, tailport=s,label="   "]
node332 -> node336[headport=n, tailport=s,label="   "]
node333 -> node330[headport=n, tailport=s,label="   "]
node334 -> node330[headport=n, tailport=s,label="   "]
node335 -> node337[headport=n, tailport=s,label="$maxSize"]
node335 -> node338[headport=n, tailport=s,label=" else  "]
node336 -> node340[headport=n, tailport=s,label="isset($this->fieldsValidateLang)"]
node336 -> node341[headport=n, tailport=s,label=" else  "]
node337 -> node342[headport=n, tailport=s,label="!isset($resourceParameters['fields'][$fieldName])"]
node337 -> node343[headport=n, tailport=s,label=" else  "]
node338 -> node336[headport=n, tailport=s,label="   "]
node339 -> node335[headport=n, tailport=s,label="   "]
node340 -> node344[headport=n, tailport=s,label="   "]
node341 -> node345[headport=n, tailport=s,label="   "]
node342 -> node339[headport=n, tailport=s,label="   "]
node343 -> node339[headport=n, tailport=s,label="   "]
node344 -> node346[headport=n, tailport=s,label="$validateMethod"]
node344 -> node347[headport=n, tailport=s,label=" else  "]
node345 -> node349[headport=n, tailport=s,label="isset($this->fieldsRequiredLang)"]
node345 -> node350[headport=n, tailport=s,label=" else  "]
node346 -> node351[headport=n, tailport=s,label="!isset($resourceParameters['fields'][$fieldName])"]
node346 -> node352[headport=n, tailport=s,label=" else  "]
node347 -> node345[headport=n, tailport=s,label="   "]
node348 -> node344[headport=n, tailport=s,label="   "]
node349 -> node353[headport=n, tailport=s,label="   "]
node350 -> node354[headport=n, tailport=s,label="   "]
node351 -> node348[headport=n, tailport=s,label="   "]
node352 -> node348[headport=n, tailport=s,label="   "]
node353 -> node355[headport=n, tailport=s,label="$field"]
node353 -> node356[headport=n, tailport=s,label=" else  "]
node354 -> node358[headport=n, tailport=s,label="isset($this->date_add)"]
node354 -> node359[headport=n, tailport=s,label=" else  "]
node355 -> node360[headport=n, tailport=s,label="!isset($resourceParameters['fields'][$field])"]
node355 -> node361[headport=n, tailport=s,label=" else  "]
node356 -> node354[headport=n, tailport=s,label="   "]
node357 -> node353[headport=n, tailport=s,label="   "]
node358 -> node362[headport=n, tailport=s,label="   "]
node359 -> node362[headport=n, tailport=s,label="   "]
node360 -> node357[headport=n, tailport=s,label="   "]
node361 -> node357[headport=n, tailport=s,label="   "]
node362 -> node363[headport=n, tailport=s,label="isset($this->date_upd)"]
node362 -> node364[headport=n, tailport=s,label=" else  "]
node363 -> node365[headport=n, tailport=s,label="   "]
node364 -> node365[headport=n, tailport=s,label="   "]
node365 -> node366[headport=n, tailport=s,label="   "]
node366 -> node367[headport=n, tailport=s,label="$resourceParametersField"]
node366 -> node368[headport=n, tailport=s,label=" else  "]
node367 -> node370[headport=n, tailport=s,label="!isset($resourceParametersField['sqlId'])"]
node367 -> node371[headport=n, tailport=s,label=" else  "]
node368 -> node372[headport=n, tailport=s,label="   "]
node369 -> node366[headport=n, tailport=s,label="   "]
node370 -> node369[headport=n, tailport=s,label="   "]
node371 -> node369[headport=n, tailport=s,label="   "]
node373 -> node372[headport=n, tailport=s,label="   "]

}

